{
    "Python Basics": {
        "Section 1. Fundamentals": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#fundamentals"
            },
            {
                "Name": "Syntax",
                "resume": "A Python statement ends with a newline character.\nPython uses spaces and indentation to organize its code structure.\nIdentifiers are names that identify variables, functions, modules, classes, etc..\nComments describe why the code works. They are ignored by the Python interpreter.\nUse the single quote, double-quotes, triple-quotes, or triple double-quotes to denote a string literal.",
                "link": "https://www.pythontutorial.net/python-basics/python-syntax/"
            },
            {
                "Name": "Variables",
                "resume": "A variable is a label that you can assign a value to it. The value of a variable can change throughout the program.\nUse the variable_name = value to create a variable.\nThe variable names should be as concise and descriptive as possible. Also, they should adhere to Python variable naming rules.",
                "link": "https://www.pythontutorial.net/python-basics/python-variables/"
            },
            {
                "Name": "Strings",
                "resume": "In Python, a string is a series of characters. Also, Python strings are immutable.\nUse quotes, either single quotes or double quotes to create string literals.\nUse the backslash character \\ to escape quotes in strings\nUse raw strings r'...' to escape the backslash character.\nUse f-strings to insert substitute variables in literal strings.\nPlace literal strings next to each other to concatenate them. And use the + operator to concatenate string variables.\nUse the len() function to get the size of a string.\nUse the str[n] to access the character at the position n of the string str.\nUse slicing to extract a substring from a string.\nUse f-string to embed variable within a string literal.",
                "link": "https://www.pythontutorial.net/python-basics/python-string/"
            },
            {
                "Name": "Numbers",
                "resume": "Python supports common numeric types including integers, floats, and complex numbers.\nUse the underscores to group numbers for the large numbers.",
                "link": "https://www.pythontutorial.net/python-basics/python-numbers/"
            },
            {
                "Name": "Booleans",
                "resume": "Python boolean data type has two values: True and False.\nUse the bool() function to test if a value is True or False.\nFalsy values evaluate to False whereas truthy values evaluate to True.\nFlasy values are the number zero, an empty string, False, None, an empty list [], an empty tuple (), and an empty dictionary {}.\nTruthy values are the values that are not Falsy.",
                "link": "https://www.pythontutorial.net/python-basics/python-boolean/"
            },
            {
                "Name": "Constants",
                "resume": "Python doesn’t have built-in constant types.\nBy convention, Python uses a variable whose name contains all capital letters to define a constant.",
                "link": "https://www.pythontutorial.net/python-basics/python-constants/"
            },
            {
                "Name": "Comments",
                "resume": "Use comments to document your code when necessary.\nA block comment and inline comment starts with a hash sign (#).\nUse docstrings for functions, modules, and classes.",
                "link": "https://www.pythontutorial.net/python-basics/python-comments/"
            },
            {
                "Name": "Type conversion",
                "resume": "Use the input() function to get an input string from users.\nUse type conversion functions such as int(), float(), bool(), and str(vaue)to convert a value from one type to another.\nUse the type() function to get the type of a value.",
                "link": "https://www.pythontutorial.net/python-basics/python-type-conversion/"
            }
        ],
        "Section 2. Operators": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#operators"
            },
            {
                "Name": "Arithmetic operators",
                "resume": "Use Python arithmetic operators to perform mathematical operations.",
                "link": "https://www.pythontutorial.net/python-basics/python-arithmetic-operators/"
            },
            {
                "Name": "Assignment operators",
                "resume": "Use the assignment operator (=) to assign a value to a variable.\nUse compound assignment operators to calculate and assign the result to a variable in one step.",
                "link": "https://www.pythontutorial.net/python-basics/python-assignment-operators/"
            },
            {
                "Name": "Comparison operators",
                "resume": "A comparison operator compares two values and returns a boolean value, either True or False.\nPython has six comparison operators: less than (<), less than or equal to (<=), greater than (>), greater than or equal to (>=), equal to (==), and not equal to (!=).",
                "link": "https://www.pythontutorial.net/python-basics/python-comparison-operators/"
            },
            {
                "Name": "Logical operators",
                "resume": "Use logical operators to combine multiple conditions.\nPython has three logical operators: and, or, and not.\nThe precedence of the logical operator from the highest to lowest: not, and, and or.",
                "link": "https://www.pythontutorial.net/python-basics/python-logical-operators/"
            }
        ],
        "Section 3. Control flow": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#control-flow"
            },
            {
                "Name": "if…else statement",
                "resume": "Use the if statement when you want to run a code block based on a condition.\nUse the if...else statement when you want to run another code block if the condition is not True.\nUse the if...elif...else statement when you want to check multiple conditions and run the corresponding code block that follows the condition that evaluates to True.",
                "link": "https://www.pythontutorial.net/python-basics/python-if/"
            },
            {
                "Name": "Ternary operator",
                "resume": "The Python ternary operator is value_if_true if condition else value_if_false.\nUse the ternary operator to make your code more concise.",
                "link": "https://www.pythontutorial.net/python-basics/python-ternary-operator/"
            },
            {
                "Name": "for loop with range()",
                "resume": "Use the for loop statement to run a code block a fixed number of times.\nUse the range(start, stop, step) to customize the loop.",
                "link": "https://www.pythontutorial.net/python-basics/python-for-range/"
            },
            {
                "Name": "while",
                "resume": "Use the Python while loop statement to execute a code block as long as a condition is True.",
                "link": "https://www.pythontutorial.net/python-basics/python-while/"
            },
            {
                "Name": "break",
                "resume": "Use the Python break statement to terminate a for loop or a while loop prematurely.",
                "link": "https://www.pythontutorial.net/python-basics/python-break/"
            },
            {
                "Name": "continue",
                "resume": "Use the Python continue statement to skip the current iteration and start the next one.",
                "link": "https://www.pythontutorial.net/python-basics/python-continue/"
            },
            {
                "Name": "pass",
                "resume": "Use the Python pass statement to create a placeholder for the code that you’ll implement later.",
                "link": "https://www.pythontutorial.net/python-pass/"
            }
        ],
        "Section 4. Functions": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#functions"
            },
            {
                "Name": "Python functions",
                "resume": "A Python function is a reusable named block of code that performs a task or returns a value.\nUse the def keyword to define a new function. A function consists of function definition and body.\nA function can have zero or more parameters. If a function has one or more parameters, you need to pass the same number of arguments into it.\nA function can perform a job or return a value. Use the return statement to return a value from a function.",
                "link": "https://www.pythontutorial.net/python-basics/python-functions/"
            },
            {
                "Name": "Default parameters",
                "resume": "Use Python default parameters to simplify the function calls.\nPlace default parameters after the non-default parameters.",
                "link": "https://www.pythontutorial.net/python-basics/python-default-parameters/"
            },
            {
                "Name": "Keyword arguments",
                "resume": "Use the Python keyword arguments to make your function call more readable and obvious, especially for functions that accept many arguments.\nAll the arguments after the first keyword argument must also be keyword arguments too.",
                "link": "https://www.pythontutorial.net/python-basics/python-keyword-arguments/"
            },
            {
                "Name": "Recursive functions",
                "resume": "A recursive function is a function that calls itself until it doesn’t.\nAnd a recursive function always has a condition that stops calling itself.",
                "link": "https://www.pythontutorial.net/python-basics/python-recursive-functions/"
            },
            {
                "Name": "Lambda Expressions",
                "resume": "Use Python lambda expressions to create anonymous functions, which are functions without names.\nA lambda expression accepts one or more arguments, contains an expression, and returns the result of that expression.\nUse lambda expressions to pass anonymous functions to a function and return a function from another function.",
                "link": "https://www.pythontutorial.net/python-basics/python-lambda-expressions/"
            },
            {
                "Name": "Docstrings",
                "resume": "Use the help() function to get the documentation of a function.\nPlace a string, either single-line or multi-line strings, as the first line in the function to add documentation to it.",
                "link": "https://www.pythontutorial.net/python-basics/python-function-docstrings/"
            }
        ],
        "Section 5. Lists": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#lists"
            },
            {
                "Name": "List",
                "resume": "A list is an ordered collection of items.\nUse square bracket notation [] to access a list element by its index. The first element has an index 0.\nUse a negative index to access a list element from the end of a list. The last element has an index -1.\nUse list[index] = new_value to modify an element from a list.\nUse append() to add a new element to the end of a list.\nUse insert() to add a new element at a position in a list.\nUse pop() to remove an element from a list and return that element.\nUse remove() to remove an element from a list.",
                "link": "https://www.pythontutorial.net/python-basics/python-list/"
            },
            {
                "Name": "Tuple",
                "resume": "Tuples are immutable lists.\nUse tuples when you want to define a list that cannot change.",
                "link": "https://www.pythontutorial.net/python-basics/python-tuples/"
            },
            {
                "Name": "Sort a list in place",
                "resume": "Use the Python List sort() method to sort a list in place.\nThe sort() method sorts the string elements in alphabetical order and sorts the numeric elements from smallest to largest.\nUse the sort(reverse=True) to reverse the default sort order.",
                "link": "https://www.pythontutorial.net/python-basics/python-sort-list/"
            },
            {
                "Name": "Sort a List",
                "resume": "Use the sorted() function to return a new sorted list from a list.\nUse the sorted() function with the reverse argument sets to True to sort a list in the reverse sort order.",
                "link": "https://www.pythontutorial.net/python-basics/python-sorted/"
            },
            {
                "Name": "Slice a List",
                "resume": "Use a list slice to extract a sub-list from a list and modify the list.",
                "link": "https://www.pythontutorial.net/python-basics/python-list-slice/"
            },
            {
                "Name": "Unpack a list",
                "resume": "Unpacking assigns elements of the list to multiple variables.\nUse the asterisk (*) in front of a variable like this *variable_name to pack the leftover elements of a list into another list.",
                "link": "https://www.pythontutorial.net/python-basics/python-unpack-list/"
            },
            {
                "Name": "Iterate over a List",
                "resume": "Use a for loop to iterate over a list.\nUse a for loop with the enumerate() function to access indexes.",
                "link": "https://www.pythontutorial.net/python-basics/python-for-loop-list/"
            },
            {
                "Name": "Find the index of an element",
                "resume": "Use the in operator with the index() function to find if an element is in a list.",
                "link": "https://www.pythontutorial.net/python-basics/python-find-index-of-element-in-list/"
            },
            {
                "Name": "Iterables",
                "resume": "An iterable is an object that can be iterated over. An iterable has the ability to return one of its elements at a time.\nAn iterator is an agent that performs iteration. It’s stateful. And an iterator is also an iterable object.\nUse the iter() function to get an iterator from an iterable object and the next() function to get the next element from the iterable object.",
                "link": "https://www.pythontutorial.net/python-basics/python-iterables/"
            },
            {
                "Name": "Transform list elements with map()",
                "resume": "Use the Python map() function to call a function on every item of a list and returns an iterator.",
                "link": "https://www.pythontutorial.net/python-basics/python-map-list/"
            },
            {
                "Name": "Filter list elements with filter()",
                "resume": "Use the Python filter() function to filter a list (or a tuple).",
                "link": "https://www.pythontutorial.net/python-basics/python-filter-list/"
            },
            {
                "Name": "Reduce list elements into a value with reduce()",
                "resume": "Use the Python reduce() function to reduce a list into a single value.",
                "link": "https://www.pythontutorial.net/python-basics/python-reduce-list/"
            },
            {
                "Name": "List comprehensions",
                "resume": "Python list comprehensions allow you to create a new list from an existing one.\nUse list comprehensions instead of map() or filter() to make your code more concise and readable.",
                "link": "https://www.pythontutorial.net/python-basics/python-list-comprehensions/"
            }
        ],
        "Section 6. Dictionaries": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#dictionaries"
            },
            {
                "Name": "Dictionary",
                "resume": "A Python dictionary is a collection of key-value pairs, where each key has an associated value.\nUse square brackets or get() method to access a value by its key.\nUse the del statement to remove a key-value pair by the key from the dictionary.\nUse for loop to iterate over keys, values, and key-value pairs in a dictionary.",
                "link": "https://www.pythontutorial.net/python-basics/python-dictionary/"
            },
            {
                "Name": "Dictionary comprehension",
                "resume": "A dictionary comprehension iterates over items of a dictionary and allows you to create a new dictionary by transforming or filtering each item.",
                "link": "https://www.pythontutorial.net/python-basics/python-dictionary-comprehension/"
            }
        ],
        "Section 7. Sets": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#sets"
            },
            {
                "Name": "Set",
                "resume": "A set is an unordered collection of immutable elements.",
                "link": "https://www.pythontutorial.net/python-basics/python-set/"
            },
            {
                "Name": "Set comprehension",
                "resume": "Use Python set comprehension to create a new set based on an existing set by applying an expression to each element of the existing set.",
                "link": "https://www.pythontutorial.net/python-basics/python-set-comprehension/"
            },
            {
                "Name": "Union of Sets",
                "resume": "The union of two or more sets returns distinct values from both sets.\nUse union() method or set union operator (|) to union two or more sets.\nThe union() method accepts one or more iterables while the set union operator (|) only accepts sets.",
                "link": "https://www.pythontutorial.net/python-basics/python-set-union/"
            },
            {
                "Name": "Intersection of Sets",
                "resume": "The intersection of two or more sets returns elements that exist in all sets.\nUse the intersection() method or set intersection operator (&) to intersect two or more sets.",
                "link": "https://www.pythontutorial.net/python-basics/python-set-intersection/"
            },
            {
                "Name": "Difference of sets",
                "resume": "A difference between two sets results in a new set containing elements in the first set that aren’t present in the second set.\nUse the set difference() method or set difference operator (-) to find the difference between sets.",
                "link": "https://www.pythontutorial.net/python-basics/python-set-difference/"
            },
            {
                "Name": "Symmetric Difference of sets",
                "resume": "The symmetric difference between two or more sets is a set of elements that are in all sets, but not in their intersections.\nUse the set symmetric_difference() method or the symmetric difference operator (^) to find the symmetric difference of two or more sets.",
                "link": "https://www.pythontutorial.net/python-basics/python-symmetric-difference/"
            },
            {
                "Name": "Subset",
                "resume": "Set A is a subset of set B if all elements of the set A are also elements of the set B\nUse Set issubset() method returns True if a set is a subset of another set.\nAlso, use the subset operator (<=)  or the proper subset operator (<) to check if a set is a subset or proper subset of another set.",
                "link": "https://www.pythontutorial.net/python-basics/python-issubset/"
            },
            {
                "Name": "Superset",
                "resume": "The set A is a superset of a set B if all elements of set B are elements of set A.\nUse the Python issuperset() method to check if a set is a superset of another.\nUse the superset operator (>=) or proper superset operator (>) to check if a set is a superset or a proper superset of another set.",
                "link": "https://www.pythontutorial.net/python-basics/python-issuperset/"
            },
            {
                "Name": "Disjoint sets",
                "resume": "Two sets are disjoint if they have no element in common.\nUse Python set isdisjoint() method to check if two sets are disjoint.",
                "link": "https://www.pythontutorial.net/python-basics/python-disjoint-sets/"
            }
        ],
        "Section 8. Exception handling": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#exception-handling"
            },
            {
                "Name": "try…except",
                "resume": "Use Python try...except statement to handle exceptions gracefully.\nUse specific exceptions in the except block as much as possible.\nUse the except Exception statement to catch other exceptions.",
                "link": "https://www.pythontutorial.net/python-basics/python-try-except/"
            },
            {
                "Name": "try…except…finally",
                "resume": "Use Python try...except...finally statement to execute a code block whether an exception occurs or not.\nUse the finally clause to clean up the resources such as closing files.",
                "link": "https://www.pythontutorial.net/python-basics/python-try-except-finally/"
            },
            {
                "Name": "try…except…else",
                "resume": "Use the Python try...except...else statement provides you with a way to control the flow of the program in case of exceptions.\nThe else clause executes if no exception occurs in the try clause.\nIf so, the else clause executes after the try clause and before the finally clause.",
                "link": "https://www.pythontutorial.net/python-basics/python-try-except-else/"
            }
        ],
        "Section 9. More on Python Loops": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#more-on-python-loops"
            },
            {
                "Name": "for…else",
                "resume": "Use Python for...else statement to execute a code block if the loop doesn’t encounter a break statement or if the iterables object is empty.",
                "link": "https://www.pythontutorial.net/python-basics/python-for-else/"
            },
            {
                "Name": "while…else",
                "resume": "The else clause in the while else statement will execute when the condition of the while loop is False and the loop runs normally without encountering the break or return statement.\nTry the Python while else statement whenever you need to have a flag in a while loop.",
                "link": "https://www.pythontutorial.net/python-basics/python-while-else/"
            },
            {
                "Name": "do…while",
                "resume": "Python doesn’t support the do-while loop statement.\nUse a while loop and the break statements to emulate a do...while loop in Python.",
                "link": "https://www.pythontutorial.net/python-basics/python-do-while/"
            }
        ],
        "Section 10. More on Python functions": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#more-on-python-functions"
            },
            {
                "Name": "Unpacking tuples",
                "resume": "Python uses the commas (,) to define a tuple, not parentheses.\nUnpacking tuples means assigning individual elements of a tuple to multiple variables.\nUse the * operator to assign remaining elements of an unpacking assignment into a list and assign it to a variable.",
                "link": "https://www.pythontutorial.net/python-basics/python-unpacking-tuple/"
            },
            {
                "Name": "*argsParameters",
                "resume": "Use Python *arg arguments for a function that accepts a variable number of arguments.\nThe *args argument exhausts positional arguments so you can only use keyword arguments after it.",
                "link": "https://www.pythontutorial.net/python-basics/python-args/"
            },
            {
                "Name": "**kwargsParameters",
                "resume": "Use the Python **kwargs parameter to allow the function to accept a variable number of keyword arguments.\nInside the function, the kwargs argument is a dictionary that contains all keyword arguments as its name-value pairs.\nPrecede double stars (**) to a dictionary argument to pass it to **kwargs parameter.\nAlways place the **kwargs parameter at the end of the parameter list, or you’ll get an error.",
                "link": "https://www.pythontutorial.net/python-basics/python-kwargs/"
            },
            {
                "Name": "Partial functions",
                "resume": "Use partial function from the functools module to create partial functions in Python.",
                "link": "https://www.pythontutorial.net/python-basics/python-partial-functions/"
            },
            {
                "Name": "Type hints",
                "resume": "Use type hints and static type checker tools to make your code more robust.",
                "link": "https://www.pythontutorial.net/python-basics/python-type-hints/"
            }
        ],
        "Section 11. Modules & Packages": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#modules-packages"
            },
            {
                "Name": "Modules",
                "resume": "A module is a Python source code file with the .py extension. The module name is the Python file name without the extension.\nTo use objects from a module, you import them using the import statement.",
                "link": "https://www.pythontutorial.net/python-basics/python-module/"
            },
            {
                "Name": "Module search path",
                "resume": "When you import a module, Python will search for the module file from the folders specified in the sys.path variable.\nPython allows you to modify the module search path by changing, adding, and removing elements from the sys.path variable.",
                "link": "https://www.pythontutorial.net/python-basics/python-module-search-path/"
            },
            {
                "Name": "__name__variable",
                "resume": "Python assign the '__main__' to the __name__ variable when you run the script directly and the module name if you import the script as a module.",
                "link": "https://www.pythontutorial.net/python-basics/python-__name__/"
            },
            {
                "Name": "Packages",
                "resume": "A Python package contains one or more modules. Python uses the folders and files structure to manage packages and modules.\nUse the __init__.py file if you want to initialize the package-level data.\nUse __all__ variable to specify the modules that will load automatically when importing the package.\nA package may contain subpackages.",
                "link": "https://www.pythontutorial.net/python-basics/python-packages/"
            },
            {
                "Name": "Private functions",
                "resume": "First, create a package with the __init__.py file\nSecond, do not specify the function in the __all__ variable.\nThird, import all symbols from the module in the __init__.py file of the package and expose only the public functions by using the __all__ variable.",
                "link": "https://www.pythontutorial.net/python-basics/python-private-functions/"
            }
        ],
        "Section 12. Working with files": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#working-with-files"
            },
            {
                "Name": "Read from a text file",
                "resume": "Use the open() function with the 'r' mode to open a text file for reading.\nUse the read(), readline(), or readlines() method to read a text file.\nAlways close a file after completing reading it using the close() method or the with statement.\nUse the encoding='utf-8' to read the UTF-8 text file.",
                "link": "https://www.pythontutorial.net/python-basics/python-read-text-file/"
            },
            {
                "Name": "Write to a text file",
                "resume": "Use the open() function with the w or a mode to open a text file for appending.\nAlways close the file after completing writing using the close() method or use the with statement when opening the file.\nUse write() and writelines() methods to write to a text file.\nPass the encoding='utf-8' to the open() function to write UTF-8 characters into a file.",
                "link": "https://www.pythontutorial.net/python-basics/python-write-text-file/"
            },
            {
                "Name": "Create a new text file",
                "resume": "Use the open() function with the 'w' or 'x' mode to create a new text file.",
                "link": "https://www.pythontutorial.net/python-basics/python-create-text-file/"
            },
            {
                "Name": "Check if a file exists",
                "resume": "Use os.path.exists() function or Path.is_file() method to check if a file exists",
                "link": "https://www.pythontutorial.net/python-basics/python-check-if-file-exists/"
            },
            {
                "Name": "Read CSV files",
                "resume": "Use csv.reader() function or csv.DictReader class to read data from a CSV file.",
                "link": "https://www.pythontutorial.net/python-basics/python-read-csv-file/"
            },
            {
                "Name": "Write CSV files",
                "resume": "Use the CSV Writer or the DictWriter class to write data to a CSV file.",
                "link": "https://www.pythontutorial.net/python-basics/python-write-csv-file/"
            },
            {
                "Name": "Rename a file",
                "resume": "Use the os.rename() function to rename a file.",
                "link": "https://www.pythontutorial.net/python-basics/python-rename-file/"
            },
            {
                "Name": "Delete a file",
                "resume": "Use the os.remove() function to delete a file.",
                "link": "https://www.pythontutorial.net/python-basics/python-delete-file/"
            }
        ],
        "Section 13. Working Directories": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#working-directories"
            },
            {
                "Name": "Working with directories",
                "resume": "Use the os.getcwd() function to get the current working directory.\nUse the os.chdir() function to change the current working directory to a new one.\nUse the os.mkdir() function to make a new directory.\nUse the os.rename() function to rename a directory.\nUse the os.rmdir() function to remove a directory.\nUse the os.walk() function to list the contents of a directory.",
                "link": "https://www.pythontutorial.net/python-basics/python-directory/"
            },
            {
                "Name": "List files in a Directory",
                "resume": "Use the os.walk() function to list files in a directory recursively.\nDefine a reusable function for listing files in a directory using the os.walk() function.",
                "link": "https://www.pythontutorial.net/python-basics/python-list-files/"
            }
        ],
        "Section 14. Strings": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#strings"
            },
            {
                "Name": "F-strings",
                "resume": "Python f-strings provide an elegant way to format text strings.\nPython replaces the result of an expression embedded inside the curly braces {} in an f-string at runtime.",
                "link": "https://www.pythontutorial.net/python-basics/python-f-strings/"
            },
            {
                "Name": "Raw strings",
                "resume": "Prefix a literal string with the letter r or R to turn it into a raw string.\nRaw strings treat backslash as a literal character.",
                "link": "https://www.pythontutorial.net/python-basics/python-raw-strings/"
            },
            {
                "Name": "Backslash",
                "resume": "The python backslash character (\\) is a special character used as a part of a special sequence such as \\t and \\n.\nUse the Python backslash (\\) to escape other special characters in a string.\nF-strings cannot contain the backslash a part of expression inside the curly braces {}.\nRaw strings treat the backslash (\\) as a literal character.",
                "link": "https://www.pythontutorial.net/python-basics/python-backslash/"
            }
        ],
        "Section 15. Third-party Packages, PIP, and Virtual Environments": [
            {
                "Name": "Introduction",
                "resume": "Python Package Index (PyPI) and pip – introduce you to the Python package index and how to install third-party packages using pip.\nVirtual Environments – understand Python virtual environments and more importantly, why you need them.\nInstall pipenv on Windows – show you how to install the pipenv tool on Windows.",
                "link": "https://www.pythontutorial.net/python-basics/#third-party-packages-pip-and-virtual-environments"
            },
            {
                "Name": "Python Package Index (PyPI) and pip",
                "resume": "Python package index provides third-party Python packages developed and maintained by the Python community.\nUse Python installer for Python (pip) to manage third-party Python packages.",
                "link": "https://www.pythontutorial.net/python-basics/python-pip/"
            },
            {
                "Name": "Virtual Environments",
                "resume": "A virtual environment creates an isolated environment for a Python project.\nUse the venv module to create a new virtual environment.",
                "link": "https://www.pythontutorial.net/python-basics/python-virtual-environments/"
            },
            {
                "Name": "Install pipenv on Windows",
                "resume": "",
                "link": "https://www.pythontutorial.net/python-basics/install-pipenv-windows/"
            }
        ]
    },
    "Python OOP": {
        "Section 1. Classes and objects": [
            {
                "Name": "Introduction",
                "resume": "Exceptions – learn about exceptions in the context of objects\nException Handling – guide you on how to handle exceptions in the right way using the try statement.\nRaise Exceptions – show you how to use the raise statement to raise exceptions.\nRaise Exception from cause – learn how to modify and forward an existing exception with a cause.\nCustom exceptions – walk you through the steps of creating a custom exception class.",
                "link": "https://www.pythontutorial.net/python-oop/#classes-and-objects"
            },
            {
                "Name": "Object-oriented programming",
                "resume": "",
                "link": "https://www.pythontutorial.net/python-oop/python-object-oriented-programming/"
            },
            {
                "Name": "Class",
                "resume": "An object is container that contains state and behavior.\nA class is a blueprint for creating objects.\nIn Python, a class is also an object, which is an instance of the type.",
                "link": "https://www.pythontutorial.net/python-oop/python-class/"
            },
            {
                "Name": "Class variables",
                "resume": "A class is an object which is an instance of the type class.\nClass variables are attributes of the class object.\nUse dot notation or getattr() function to get the value of a class attribute.\nUse dot notation or setattr() function to set the value of a class attribute.\nPython is a dynamic language. Therefore, you can assign a class variable to a class at runtime.\nPython stores class variables in the __dict__ attribute. The __dict__ attribute is a dictionary.",
                "link": "https://www.pythontutorial.net/python-oop/python-class-variables/"
            },
            {
                "Name": "Instance methods",
                "resume": "When you define a function inside a class, it’s purely a function. However, when you call the function via an instance of a class, the function becomes a method. Therefore,  a method is a function that is bound to an instance of a class.\nA method is an instance of the method class.\nA method has the first argument (self) as the object to which it is bound.\nPython automatically passes the bound object to the method as the first argument. By convention, its name is self.",
                "link": "https://www.pythontutorial.net/python-oop/python-methods/"
            },
            {
                "Name": "__init__()",
                "resume": "Use the __init__() method to initialize the object’s attributes.\nThe __init__() doesn’t create an object but is automatically called after the object is created.",
                "link": "https://www.pythontutorial.net/python-oop/python-__init__/"
            },
            {
                "Name": "Instance variables",
                "resume": "Instance variables are bound to a specific instance of a class.\nPython stores instance variables in the __dict__ attribute of the instance. Each instance has its own __dict__ attribute and the keys in this __dict__ may be different.\nWhen you access a variable via the instance, Python finds the variable in the __dict__ attribute of the instance. If it cannot find the variable, it goes up and look it up in the __dict__ attribute of the class.",
                "link": "https://www.pythontutorial.net/python-oop/python-instance-variables/"
            },
            {
                "Name": "Private attributes",
                "resume": "Encapsulation is the packing of data and methods into a class so that you can hide the information and restrict access from outside.\nPrefix an attribute with a single underscore (_) to make it private by convention.\nPrefix an attribute with double underscores (__) to use the name mangling.",
                "link": "https://www.pythontutorial.net/python-oop/python-private-attributes/"
            },
            {
                "Name": "Class attributes",
                "resume": " A class attribute is shared by all instances of the class. To define a class attribute, you place it outside of the __init__() method.\nUse class_name.class_attribute or object_name.class_attribute to access the value of the class_attribute.\nUse class attributes for storing class contants, track data across all instances, and setting default values for all instances of the class.",
                "link": "https://www.pythontutorial.net/python-oop/python-class-attributes/"
            },
            {
                "Name": "Static methods",
                "resume": "Use static methods to define utility methods or group a logically related functions into a class.\nUse the @staticmethod decorator to define a static method.",
                "link": "https://www.pythontutorial.net/python-oop/python-static-methods/"
            }
        ],
        "Section 2. Special methods": [
            {
                "Name": "Introduction",
                "resume": "Exceptions – learn about exceptions in the context of objects\nException Handling – guide you on how to handle exceptions in the right way using the try statement.\nRaise Exceptions – show you how to use the raise statement to raise exceptions.\nRaise Exception from cause – learn how to modify and forward an existing exception with a cause.\nCustom exceptions – walk you through the steps of creating a custom exception class.",
                "link": "https://www.pythontutorial.net/python-oop/#special-methods"
            },
            {
                "Name": "__str__ method",
                "resume": "Implement the __str__ method to customize the string representation of an instance of a class.",
                "link": "https://www.pythontutorial.net/python-oop/python-__str__/"
            },
            {
                "Name": "__repr__ method",
                "resume": "Implement the __repr__ method to customize the string representation of an object when repr() is called on it.\nThe __str__ calls __repr__ internally by default.\nPython falls back to __repr__ if __str__ is not defined.",
                "link": "https://www.pythontutorial.net/python-oop/python-__repr__/"
            },
            {
                "Name": "__eq__ method",
                "resume": "Implement the Python __eq__ method to define the equality logic for comparing two objects using the equal operator (==).",
                "link": "https://www.pythontutorial.net/python-__eq__/"
            },
            {
                "Name": "__hash__ method",
                "resume": "By default, __hash__ uses the id of objects and __eq__ uses the is operator for comparisons.\nIf you implement __eq__, Python sets __hash__ to None unless you implement __hash__.",
                "link": "https://www.pythontutorial.net/python-oop/python-__hash__/"
            },
            {
                "Name": "__bool__ method",
                "resume": "All objects of custom classes return True by default.\nImplement the __bool__ method to override the default. The __bool__ method must return either True or False.\nIf a class doesn’t implement the __bool__ method,  Python will use the result of the __len__ method. If the class doesn’t implement both methods, the objects will be True by default.",
                "link": "https://www.pythontutorial.net/python-oop/python-__bool__/"
            },
            {
                "Name": "__del__ method",
                "resume": "Python calls the __del__ method right before the garbage collector destroys the object.\nThe garbage collector destroys an object when there is no reference to the object.\nException occurs inside the __del__ method is not raised but silent.\nAvoid using __del__ for clean up resources; use the context manager instead.",
                "link": "https://www.pythontutorial.net/python-oop/python-__del__/"
            }
        ],
        "Section 3. Property": [
            {
                "Name": "Introduction",
                "resume": "Exceptions – learn about exceptions in the context of objects\nException Handling – guide you on how to handle exceptions in the right way using the try statement.\nRaise Exceptions – show you how to use the raise statement to raise exceptions.\nRaise Exception from cause – learn how to modify and forward an existing exception with a cause.\nCustom exceptions – walk you through the steps of creating a custom exception class.",
                "link": "https://www.pythontutorial.net/python-oop/#property"
            },
            {
                "Name": "Property",
                "resume": "Use the Python property() class to define a property for a class.",
                "link": "https://www.pythontutorial.net/python-oop/python-properties/"
            },
            {
                "Name": "@property decorator",
                "resume": "Use the @property decorator to create a property for a class.",
                "link": "https://www.pythontutorial.net/python-oop/python-property-decorator/"
            },
            {
                "Name": "Read-only property",
                "resume": "Define only the getter to make a property readonly\nDo use computed property to make the property of a class more natural\nUse caching computed properties to improve the performance.",
                "link": "https://www.pythontutorial.net/python-oop/python-readonly-property/"
            },
            {
                "Name": "Delete a property",
                "resume": "Use the deleter decorator to delete a property of an instance of a class.",
                "link": "https://www.pythontutorial.net/python-oop/python-delete-property/"
            }
        ],
        "Section 4. Single inheritance": [
            {
                "Name": "Introduction",
                "resume": "Exceptions – learn about exceptions in the context of objects\nException Handling – guide you on how to handle exceptions in the right way using the try statement.\nRaise Exceptions – show you how to use the raise statement to raise exceptions.\nRaise Exception from cause – learn how to modify and forward an existing exception with a cause.\nCustom exceptions – walk you through the steps of creating a custom exception class.",
                "link": "https://www.pythontutorial.net/python-oop/#single-inheritance"
            },
            {
                "Name": "Inheritance",
                "resume": "Inheritance allows a class to reuse existing attributes and methods of another class.\nThe class that inherits from another class is called a child class, a subclass, or a derived class.\nThe class from which other classes inherit is called a parent class, a super class, or a base class.\nUse isinstance() to check if an object is an instance of a class.\nUse issubclass() to check if a class is a subclass of another class.",
                "link": "https://www.pythontutorial.net/python-oop/python-inheritance/"
            },
            {
                "Name": "Overriding methods",
                "resume": "Method overriding allows a child class to provide a specific implementation of a method that is already provided by one of its parent class.",
                "link": "https://www.pythontutorial.net/python-oop/python-overriding-method/"
            },
            {
                "Name": "super()",
                "resume": "Use super() to call the methods of a parent class from a child class.",
                "link": "https://www.pythontutorial.net/python-oop/python-super/"
            },
            {
                "Name": "__slots__",
                "resume": "Python uses dictionaries to store instance attributes of instances of a class. This allows you to dynamically add more attributes to instances at runtime but also create a memory overhead.\nDefine __slots__ in the class if it has predetermined instances attributes to instruct Python not to use dictionaries to store instance attributes. The __slots__ optimizes the memory if the class has many objects.",
                "link": "https://www.pythontutorial.net/python-oop/python-__slots__/"
            },
            {
                "Name": "Abstract class",
                "resume": "Abstract classes are classes that you cannot create instances from.\nUse abc module to define abstract classes.",
                "link": "https://www.pythontutorial.net/python-oop/python-abstract-class/"
            }
        ],
        "Section 5. Enumeration": [
            {
                "Name": "Introduction",
                "resume": "Exceptions – learn about exceptions in the context of objects\nException Handling – guide you on how to handle exceptions in the right way using the try statement.\nRaise Exceptions – show you how to use the raise statement to raise exceptions.\nRaise Exception from cause – learn how to modify and forward an existing exception with a cause.\nCustom exceptions – walk you through the steps of creating a custom exception class.",
                "link": "https://www.pythontutorial.net/python-oop/#enumeration"
            },
            {
                "Name": "Enumeration",
                "resume": "An enumeration is a set of members that have associated unique constant values.\nCreate a new enumeration by defining a class that inherits from the Enum type of the enum module.\nThe members have the same types as the enumeration to which they belong.\nUse the enumeration[member_name] to access a member by its name and enumeration(member_value) to access a member by its value.\nEnumerations are iterable.\nEnumeration members are hashable.\nEnumerable are immuable.\nCannot inherits from an enumeration unless it has no members.",
                "link": "https://www.pythontutorial.net/python-oop/python-enumeration/"
            },
            {
                "Name": "Enum Aliases & @enum.unique",
                "resume": "When an enumeration has different members with the same values, the first member is the main member while others are aliases of the main member.\nUse the @enum.unique decorator from the enum module to enforce the uniqueness of the values of the members.",
                "link": "https://www.pythontutorial.net/python-oop/python-enum-unique/"
            },
            {
                "Name": "Customize and extend enumerations",
                "resume": "Implement dunder methods to customize the behavior of Python enum classes.\nDefine an emum class with no members and methods and extends this base class.",
                "link": "https://www.pythontutorial.net/python-oop/python-enum-class/"
            },
            {
                "Name": "auto",
                "resume": "Use enum auto() class to generate unique values for enumeration members.",
                "link": "https://www.pythontutorial.net/python-oop/python-enum-auto/"
            }
        ],
        "Section 6. SOLID principles": [
            {
                "Name": "Introduction",
                "resume": "Exceptions – learn about exceptions in the context of objects\nException Handling – guide you on how to handle exceptions in the right way using the try statement.\nRaise Exceptions – show you how to use the raise statement to raise exceptions.\nRaise Exception from cause – learn how to modify and forward an existing exception with a cause.\nCustom exceptions – walk you through the steps of creating a custom exception class.",
                "link": "https://www.pythontutorial.net/python-oop/#solid-principles"
            },
            {
                "Name": "Single Responsibility Principle",
                "resume": "The single responsibility principle (SRP) states that every class, method, or function should have only one job or one reason to change.\nUse the single responsibility principle to separate classes, methods, and functions with the same reason for changes.",
                "link": "https://www.pythontutorial.net/python-oop/python-single-responsibility-principle/"
            },
            {
                "Name": "Open/Closed Principle",
                "resume": "The open-closed principle allows you to design the system so that it is open for extension but closed for modification.",
                "link": "https://www.pythontutorial.net/python-oop/python-open-closed-principle/"
            },
            {
                "Name": "Liskov Substitution Principle",
                "resume": "The Liskov substitution principle states that a child class must be substitutable for its parent class.",
                "link": "https://www.pythontutorial.net/python-oop/python-liskov-substitution-principle/"
            },
            {
                "Name": "Interface Segregation Principle",
                "resume": "The interface segregation principle advises that the interfaces should be small in terms of cohesions.\nMake fine grained interfaces that are client-specific. Clients should not be forced to implement interfaces they do not use.",
                "link": "https://www.pythontutorial.net/python-oop/python-interface-segregation-principle/"
            },
            {
                "Name": "Dependency Inversion Principle",
                "resume": "Use the dependency inversion principle to make your code more robust by making the high-level module dependent on the abstraction, not the concrete implementation.",
                "link": "https://www.pythontutorial.net/python-oop/python-dependency-inversion-principle/"
            }
        ],
        "Section 7. Multiple inheritance": [
            {
                "Name": "Introduction",
                "resume": "Exceptions – learn about exceptions in the context of objects\nException Handling – guide you on how to handle exceptions in the right way using the try statement.\nRaise Exceptions – show you how to use the raise statement to raise exceptions.\nRaise Exception from cause – learn how to modify and forward an existing exception with a cause.\nCustom exceptions – walk you through the steps of creating a custom exception class.",
                "link": "https://www.pythontutorial.net/python-oop/#multiple-inheritance"
            },
            {
                "Name": "Multiple inheritance",
                "resume": "Python multiple inheritance allows one class to inherit from multiple classes.\nThe method order resolution defines the class search path to find the method to call.",
                "link": "https://www.pythontutorial.net/python-oop/python-multiple-inheritance/"
            },
            {
                "Name": "Mixin",
                "resume": "A mixin class provides method implementions for resuse by multiple related subclasses.",
                "link": "https://www.pythontutorial.net/python-oop/python-mixin/"
            }
        ],
        "Section 8. Descriptors": [
            {
                "Name": "Introduction",
                "resume": "Exceptions – learn about exceptions in the context of objects\nException Handling – guide you on how to handle exceptions in the right way using the try statement.\nRaise Exceptions – show you how to use the raise statement to raise exceptions.\nRaise Exception from cause – learn how to modify and forward an existing exception with a cause.\nCustom exceptions – walk you through the steps of creating a custom exception class.",
                "link": "https://www.pythontutorial.net/python-oop/#descriptors"
            },
            {
                "Name": "Descriptors",
                "resume": "Descriptors are objects of class that implements one of the method in the descriptor protocol including __set__, __get__, __del__",
                "link": "https://www.pythontutorial.net/python-oop/python-descriptors/"
            },
            {
                "Name": "Data vs non-data descriptors",
                "resume": "Data descriptors are objects of a class that implements __set__ method (and/or __delete__ method)\nNon-data descriptors are objects of a class that have the __get__ method only.\nWhen accessing object’s attributes, data descriptors override the instance’s attributes and instance’s attributes override non-data descriptors.",
                "link": "https://www.pythontutorial.net/python-oop/python-data-descriptors/"
            }
        ],
        "Section 9. Metaprogramming": [
            {
                "Name": "Introduction",
                "resume": "Exceptions – learn about exceptions in the context of objects\nException Handling – guide you on how to handle exceptions in the right way using the try statement.\nRaise Exceptions – show you how to use the raise statement to raise exceptions.\nRaise Exception from cause – learn how to modify and forward an existing exception with a cause.\nCustom exceptions – walk you through the steps of creating a custom exception class.",
                "link": "https://www.pythontutorial.net/python-oop/#metaprogramming"
            },
            {
                "Name": "__new__",
                "resume": "The __new__() is a static method of the object class.\nWhen you create a new object by calling the class, Python calls the __new__() method to create the object first and then calls the __init__() method to initialize the object’s attributes.\nOverride the __new__() method if you want to tweak the object at creation time.",
                "link": "https://www.pythontutorial.net/python-oop/python-__new__/"
            },
            {
                "Name": "type class",
                "resume": "In Python, a class is an instance of the type class.\nThe type class creates other classs, therefore, it is called a metaclass.",
                "link": "https://www.pythontutorial.net/python-oop/python-type-class/"
            },
            {
                "Name": "Metaclass",
                "resume": "A metaclass is a class that creates other classes.",
                "link": "https://www.pythontutorial.net/python-oop/python-metaclass/"
            },
            {
                "Name": "Metaclass example",
                "resume": "Define a list of object’s properties.\nDefine an __init__ method to initialize object’s attributes.\nImplement the __str__ and __repr__ methods to represent the objects in human-readable and machine-readable formats.\nImplement the __eq__ method to compare objects by values of all properties.\nImplement the __hash__ method to use the objects of the class as keys of a dictionary or elements of a set.",
                "link": "https://www.pythontutorial.net/python-oop/python-metaclass-example/"
            },
            {
                "Name": "dataclass",
                "resume": "Use the @dataclass decorator from the dataclasses module to make a class a dataclass. The dataclass object implements the __eq__ and __str__ by default.\nUse the astuple() and asdict() functions to convert an object of a dataclass to a tuple and dictionary.\nUse frozen=True to define a class whose objects are immutable.\nUse __post_init__ method to initalize attributes that depends on other attributes.\nUse sort_index to specify the sort attributes of the dataclass objects.",
                "link": "https://www.pythontutorial.net/python-oop/python-dataclass/"
            }
        ],
        "Section 10. Exceptions": [
            {
                "Name": "Introduction",
                "resume": "Exceptions – learn about exceptions in the context of objects\nException Handling – guide you on how to handle exceptions in the right way using the try statement.\nRaise Exceptions – show you how to use the raise statement to raise exceptions.\nRaise Exception from cause – learn how to modify and forward an existing exception with a cause.\nCustom exceptions – walk you through the steps of creating a custom exception class.",
                "link": "https://www.pythontutorial.net/python-oop/#exceptions"
            },
            {
                "Name": "Exceptions",
                "resume": "Python exceptions are objects of classes, which are the subclasses of the BaseException class.\nDo handle the exception from the most specific to lest specific.",
                "link": "https://www.pythontutorial.net/python-oop/python-exceptions/"
            },
            {
                "Name": "Exception Handling",
                "resume": "Use the try statement to handle exception.\nPlace only minimal code that you want to protect from potential exceptions in the try clause.\nHandle exceptions from most specific to least specific in terms of exception types. The order of except clauses is important.\nThe finally always executes whether the exceptions occurred or not.\nThe else clause only executes when the try clause terminates normally. The else clause is valid only if the try statement has at least one except clause.\nAvoid using bare exception handlers.",
                "link": "https://www.pythontutorial.net/python-oop/python-exception-handling/"
            },
            {
                "Name": "Raise Exceptions",
                "resume": "Use the Python raise statement to raise an exception.\nWhen handling exception, you can raise the same or another exception.",
                "link": "https://www.pythontutorial.net/python-oop/python-raise-exception/"
            },
            {
                "Name": "Raise Exception from cause",
                "resume": "Use the Python raise from statement to modify and forward an existing exception.\nUse the raise exception from None statment to hide the cause of the exception.",
                "link": "https://www.pythontutorial.net/python-oop/python-raise-from/"
            },
            {
                "Name": "Custom exceptions",
                "resume": "Subclass the Exception class or one of its subclasses to define a custom exception class.\nCreate a exception class hierarchy to make the exception classes more organized and catch exceptions at multiple levels.",
                "link": "https://www.pythontutorial.net/python-oop/python-custom-exception/"
            }
        ]
    },
    "Python Concurrency": {
        "Section 1. Multithreading": [
            {
                "Name": "Introduction",
                "resume": "Understanding Event Loop – explain how the event loop works and how asyncio package uses the event loop to achieve a single-threaded concurrency model.\nasync/await – introduce to you coroutines and how to use the async and await keywords to define and pause coroutines.\nCreating tasks – learn how to create tasks and schedule them for running on the event loop.\nCanceling tasks – show you how to cancel a task using the cancel() method of the Task object.\nCanceling a task with a timeout – show you how to use the asyncio.wait_for() function to cancel a task with a timeout.\nasyncio.wait() – learn about the asyncio.wait() function to run an iterable of awaitable objects concurrently.\nFuture – explain to you the Future object and awaitables.\nRunning multiple tasks concurrently with gather() – run a list of tasks concurrently with the asyncio.gather() function.",
                "link": "https://www.pythontutorial.net/python-concurrency/#multithreading"
            },
            {
                "Name": "Understanding Processes and Threads",
                "resume": "A process is an instance of a program running on a computer.\nA program can have one or more processes and a process can have one or more threads.\nA thread is a unit of execution within a process.\nA process can have one or more threads.",
                "link": "https://www.pythontutorial.net/advanced-python/differences-between-processes-and-threads/"
            },
            {
                "Name": "Threading",
                "resume": "Use the Python threading module to create a multi-threaded application.\nUse the Thread(function, args) to create a new thread.\nCall the start() method of the Thread class to start the thread.\nCall the join() method of the Thread class to wait for the thread to complete in the main thread.\nOnly use threading for I/O bound processing applications.",
                "link": "https://www.pythontutorial.net/advanced-python/python-threading/"
            },
            {
                "Name": "Extending the Thread class",
                "resume": "Extend the Thread class to run code in a new thread by calling the __init__() method of the superclass in the subclass and override the run method to add the code to run in a new thread.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-thread-class/"
            },
            {
                "Name": "Returning values from a Thread",
                "resume": "Extend the Thread class and set the instance variables inside the subclass to return the values from a child thread to the main thread.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-thread-return-value/"
            },
            {
                "Name": "Multithreading Example",
                "resume": "Define a class that inherits from the threading.Thread class and override the run() method.",
                "link": "https://www.pythontutorial.net/advanced-python/python-multithreading-example/"
            },
            {
                "Name": "Daemon threads",
                "resume": "A daemon thread is a background thread.\nA daemon thread is useful for executing tasks that are not critical.\nThe program can exit and doesn’t need to wait for the daemon threads to be completed.\nA daemon thread is automatically killed when the program exits.",
                "link": "https://www.pythontutorial.net/advanced-python/python-daemon-threads/"
            },
            {
                "Name": "Thread Pools",
                "resume": "A thread pool is a pattern for managing multiple threads efficiently.\nUse ThreadPoolExecutor class to manage a thread pool in Python.\nCall the submit() method of the ThreadPoolExecutor to submit a task to the thread pool for execution. The submit() method returns a Future object.\nCall the map() method of the ThreadPoolExecutor class to execute a function in a thread pool with each element in a list.",
                "link": "https://www.pythontutorial.net/advanced-python/python-threadpoolexecutor/"
            }
        ],
        "Section 2. Thread Synchronization Techniques": [
            {
                "Name": "Introduction",
                "resume": "Understanding Event Loop – explain how the event loop works and how asyncio package uses the event loop to achieve a single-threaded concurrency model.\nasync/await – introduce to you coroutines and how to use the async and await keywords to define and pause coroutines.\nCreating tasks – learn how to create tasks and schedule them for running on the event loop.\nCanceling tasks – show you how to cancel a task using the cancel() method of the Task object.\nCanceling a task with a timeout – show you how to use the asyncio.wait_for() function to cancel a task with a timeout.\nasyncio.wait() – learn about the asyncio.wait() function to run an iterable of awaitable objects concurrently.\nFuture – explain to you the Future object and awaitables.\nRunning multiple tasks concurrently with gather() – run a list of tasks concurrently with the asyncio.gather() function.",
                "link": "https://www.pythontutorial.net/python-concurrency/#thread-synchronization-techniques"
            },
            {
                "Name": "Lock",
                "resume": "A race condition occurs when two threads access a shared variable at the same time.\nUse a threading lock object to prevent the race condition\nCall the acquire() method of a lock object to acquire a lock.\nCall the release() method of a lock object to release the previously acquired lock.\nUse a threading lock object with the with statement to make it easier to acquire and release the lock.",
                "link": "https://www.pythontutorial.net/advanced-python/python-threading-lock/"
            },
            {
                "Name": "Event",
                "resume": "Use the threading.Event class to communicate between threads.\nUse the set() method to set the event and clear() method to unset the event.\nUse the is_set() method to check if an event is set.\nUse the wait() method to wait for the event to be set.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-threading-event/"
            },
            {
                "Name": "How to stop a thread",
                "resume": "Use the Event object to stop a child thread.\nUse the set() method to set an internal flag of an Event object to True.\nUse the is_set() method to check if the internal flag of an Event object was set.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-stop-thread/"
            },
            {
                "Name": "Semaphore",
                "resume": "Use Python semaphore to control the number of threads that can access a shared resource simultaneously.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-semaphore/"
            }
        ],
        "Section 3. Sharing Data Between Threads": [
            {
                "Name": "Introduction",
                "resume": "Understanding Event Loop – explain how the event loop works and how asyncio package uses the event loop to achieve a single-threaded concurrency model.\nasync/await – introduce to you coroutines and how to use the async and await keywords to define and pause coroutines.\nCreating tasks – learn how to create tasks and schedule them for running on the event loop.\nCanceling tasks – show you how to cancel a task using the cancel() method of the Task object.\nCanceling a task with a timeout – show you how to use the asyncio.wait_for() function to cancel a task with a timeout.\nasyncio.wait() – learn about the asyncio.wait() function to run an iterable of awaitable objects concurrently.\nFuture – explain to you the Future object and awaitables.\nRunning multiple tasks concurrently with gather() – run a list of tasks concurrently with the asyncio.gather() function.",
                "link": "https://www.pythontutorial.net/python-concurrency/#sharing-data-between-threads"
            },
            {
                "Name": "Thread-safe Queue",
                "resume": "Use the Queue class of the queue module to safely exchange data between multiple threads.",
                "link": "https://www.pythontutorial.net/advanced-python/python-thread-queue/"
            }
        ],
        "Section 4. Multiprocessing": [
            {
                "Name": "Introduction",
                "resume": "Understanding Event Loop – explain how the event loop works and how asyncio package uses the event loop to achieve a single-threaded concurrency model.\nasync/await – introduce to you coroutines and how to use the async and await keywords to define and pause coroutines.\nCreating tasks – learn how to create tasks and schedule them for running on the event loop.\nCanceling tasks – show you how to cancel a task using the cancel() method of the Task object.\nCanceling a task with a timeout – show you how to use the asyncio.wait_for() function to cancel a task with a timeout.\nasyncio.wait() – learn about the asyncio.wait() function to run an iterable of awaitable objects concurrently.\nFuture – explain to you the Future object and awaitables.\nRunning multiple tasks concurrently with gather() – run a list of tasks concurrently with the asyncio.gather() function.",
                "link": "https://www.pythontutorial.net/python-concurrency/#multiprocessing"
            },
            {
                "Name": "Multiprocessing",
                "resume": "Use Python multiprocessing to run code in parallel to deal with CPU-bound tasks.",
                "link": "https://www.pythontutorial.net/advanced-python/python-multiprocessing/"
            },
            {
                "Name": "Process Pools",
                "resume": "Use the Python ProcessPoolExecutor class to create and manage a process pool automatically.",
                "link": "https://www.pythontutorial.net/advanced-python/python-processpoolexecutor/"
            }
        ],
        "Section 5. Async I/O": [
            {
                "Name": "Introduction",
                "resume": "Understanding Event Loop – explain how the event loop works and how asyncio package uses the event loop to achieve a single-threaded concurrency model.\nasync/await – introduce to you coroutines and how to use the async and await keywords to define and pause coroutines.\nCreating tasks – learn how to create tasks and schedule them for running on the event loop.\nCanceling tasks – show you how to cancel a task using the cancel() method of the Task object.\nCanceling a task with a timeout – show you how to use the asyncio.wait_for() function to cancel a task with a timeout.\nasyncio.wait() – learn about the asyncio.wait() function to run an iterable of awaitable objects concurrently.\nFuture – explain to you the Future object and awaitables.\nRunning multiple tasks concurrently with gather() – run a list of tasks concurrently with the asyncio.gather() function.",
                "link": "https://www.pythontutorial.net/python-concurrency/#async-io"
            },
            {
                "Name": "Understanding Event Loop",
                "resume": "Concurrency means running multiple tasks at the same time.\nThe event loop is responsible for getting tasks from an event queue and handling it.\nThe asyncio package uses an event loop to achieve a single-threaded concurrency model.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-event-loop/"
            },
            {
                "Name": "async/await",
                "resume": "A coroutine is a regular function with the power of pausing a long-running operation, waiting for the result, and resuming from the paused point.\nUse async keyword to define a coroutine.\nUse await keyword to pause a coroutine.\nUse asyncio.run() function to automatically execute a coroutine on an event loop and manage an event loop.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-async-await/"
            },
            {
                "Name": "Creating tasks",
                "resume": "A task is a wrapper of a coroutine that schedules the coroutine to run on the event loop as soon as possible.\nUse the create_task() function of the asyncio library to create a task.\nUse the await keyword with the task at some point in the program so that the task can be completed before the event loop is closed by the asyncio.run() function.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-asyncio-create_task/"
            },
            {
                "Name": "Canceling tasks",
                "resume": "Use the cancel() method of the Task object to cancel a task\nawait a canceled task will raise a CancelledError exception.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-cancel-tasks/"
            },
            {
                "Name": "Canceling a task with a timeout",
                "resume": "Use asyncio.wait_for() function to wait for a task with a timeout.\nUse asyncio.shield() function to prevent the cancellation of a task after a timeout.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-asyncio-wait_for/"
            },
            {
                "Name": "asyncio.wait()",
                "resume": "Use the asyncio.wait() to run tasks in an iterable concurrently.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-asyncio-wait/"
            },
            {
                "Name": "Future",
                "resume": "A future is an object that returns a value in the future, not now.\nFuture, Coroutine, and Task are awaitable and their objects can be used with the await keyword.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-asyncio-future/"
            },
            {
                "Name": "Running multiple tasks concurrently with gather()",
                "resume": "The asyncio.gather() runs multiple asynchronous operations, wraps a coroutine as a task, and returns a tuple of results in the same order of awaitables.\nSet return_exceptions to True to allow errors to be returned as results.",
                "link": "https://www.pythontutorial.net/python-concurrency/python-asyncio-gather/"
            }
        ]
    },
    "Advanced Python": {
        "Section 1. Variables & Memory Management": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#variables-memory-management"
            },
            {
                "Name": "References",
                "resume": "Python variables are references to objects located in the memory\nUse the id() function to get the memory address of the object referenced by a variable.",
                "link": "https://www.pythontutorial.net/advanced-python/python-references/"
            },
            {
                "Name": "Garbage collection",
                "resume": "Python automatically manages memory for you using reference counting and garbage collector.\nPython garbage collector helps you avoid memory leaks by detecting circular references and destroy objects appropriately.\nNever disable the garbage collector unless you have a good reason to do so.",
                "link": "https://www.pythontutorial.net/advanced-python/python-garbage-collection/"
            },
            {
                "Name": "Dynamic typing",
                "resume": "Python is a dynamically typed language.\nIn Python, variables don’t associate with any particular types.\nUse the type() function to get the type of the objects that variables reference.",
                "link": "https://www.pythontutorial.net/advanced-python/dynamic-typing-in-python/"
            },
            {
                "Name": "Mutable & Immutable objects",
                "resume": "An object whose internal state cannot be changed is called immutable for example a number, a string, and a tuple.\nAn object whose internal state can be changed is called mutable for example a list, a set, and a dictionary.",
                "link": "https://www.pythontutorial.net/advanced-python/python-mutable-and-immutable/"
            },
            {
                "Name": "is operator",
                "resume": "Use the is operator to check if two variables reference the same object.\nUse the is operator to check two variables for identity and == to check for two variables for equality.\nUse the not operator to negate the result of the is operator.",
                "link": "https://www.pythontutorial.net/advanced-python/python-is-operator/"
            },
            {
                "Name": "None",
                "resume": "None is a singleton object of the NoneType class.\nNone is not equal to anything except itself.\nUse is or is not operator to compare None with other values.",
                "link": "https://www.pythontutorial.net/advanced-python/python-none/"
            }
        ],
        "Section 2. Variable scopes": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#variable-scopes"
            },
            {
                "Name": "Variable scopes",
                "resume": "The scopes of variables are the parts of the code where you can access the variables.\nThe built-in scope is accessible from everywhere.\nThe global scope (or module scope) can be accessible from every part of the module.\nThe local scope is accessible from inside a function.\nPython stores the objects and their bindings in the namespace of the scope.\nPython looks up an object in the current scope first and goes up to the enclosing scope if Python doesn’t find it.\nPython scopes are nested.\nUse the global keyword if you want to access a global variable from inside a function.",
                "link": "https://www.pythontutorial.net/advanced-python/python-variable-scopes/"
            },
            {
                "Name": "Nonlocal scopes and nonlocal variables",
                "resume": "The enclosing scopes of inner functions are called nonlocal scopes.\nUse the nonlocal keyword to modify the variable from the nonlocal scopes.\nAnd Python will look up the nonlocal variables in the enclosing local scopes chain. It won’t search for the variable in the global scope.",
                "link": "https://www.pythontutorial.net/advanced-python/python-nonlocal/"
            }
        ],
        "Section 3. Closures": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#closures"
            },
            {
                "Name": "Closures",
                "resume": "A closure is a function and an extended scope that contains free variables.",
                "link": "https://www.pythontutorial.net/advanced-python/python-closures/"
            }
        ],
        "Section 4. Decorators": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#decorators"
            },
            {
                "Name": "Decorators",
                "resume": "A decorator is a function that changes the behavior of another function without explicitly modifying it.\nUse the @ symbol to decorate a function.\nUse the wraps function from the functools built-in module to retain the documentation and name of the original function.",
                "link": "https://www.pythontutorial.net/advanced-python/python-decorators/"
            },
            {
                "Name": "Decorators with arguments",
                "resume": "Use a factory decorator to return a decorator that accepts arguments.",
                "link": "https://www.pythontutorial.net/advanced-python/python-decorator-arguments/"
            },
            {
                "Name": "Class Decorators",
                "resume": "Use callable classes as decorators by implementing the __call__ method.\nPass the decorator arguments to the __init__ method.",
                "link": "https://www.pythontutorial.net/advanced-python/python-class-decorators/"
            },
            {
                "Name": "Monkey Patching",
                "resume": "The monkey patching technique in Python allows you to dynamically modify or extend existing code at runtime without changing the original code.\nUse the monkey patching technique if you have a good reason to do so.",
                "link": "https://www.pythontutorial.net/advanced-python/python-monkey-patching/"
            }
        ],
        "Section 5. Named Tuples": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#named-tuples"
            },
            {
                "Name": "Named Tuples",
                "resume": "Named tuples are tuples whose element positions have meaningful names.\nUse the namedtuple function of the collections standard library to create a named tuple class.\nNamed tuples are immutable.",
                "link": "https://www.pythontutorial.net/advanced-python/python-namedtuple/"
            }
        ],
        "Section 6. Sequence Types": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#sequence-types"
            },
            {
                "Name": "Sequence types",
                "resume": "Python sequences are positionally ordered collections of items.",
                "link": "https://www.pythontutorial.net/advanced-python/python-sequences/"
            },
            {
                "Name": "Lists vs. Tuples",
                "resume": "A tuple is immutable while a list is mutable.\nThe storage efficiency of a tuple is greater than a list.\nCopying a tuple is slightly faster than a list.\nUse a tuple if you don’t intend to mutable it.",
                "link": "https://www.pythontutorial.net/advanced-python/python-tuple-vs-list/"
            },
            {
                "Name": "Slicing",
                "resume": "Slicing only works for sequence types including mutable and immutable sequences.\nA slice is an object the slice type.",
                "link": "https://www.pythontutorial.net/advanced-python/python-slicing/"
            },
            {
                "Name": "Custom Sequence Type",
                "resume": "Implement the __len__ and __getitem__ method to define a custom sequence.\nThe __getitem__ method need to returns an element based on a given index or raise an IndexError if the index is out of bounds.",
                "link": "https://www.pythontutorial.net/advanced-python/python-fibonacci-sequence/"
            }
        ],
        "Section 7. Iterators and Iterables": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#iterators-and-iterables"
            },
            {
                "Name": "Iterators",
                "resume": "An iterator is an object that implements __iter__ and __next__ methods.\nAn iterator cannot be reusable once all items have been returned.",
                "link": "https://www.pythontutorial.net/advanced-python/python-iterators/"
            },
            {
                "Name": "Iterators vs. Iterables",
                "resume": "An iterable is an object that implements the __iter__ method which returns an iterator.\nAn iterator is an object that implements the __iter__ method which returns itself and the __next__ method which returns the next element.\nIterators are also iterables.",
                "link": "https://www.pythontutorial.net/advanced-python/python-iterator-vs-iterable/"
            },
            {
                "Name": "iter()",
                "resume": "Use the Python iter() function to get an iterator of an object.",
                "link": "https://www.pythontutorial.net/advanced-python/python-iter/"
            }
        ],
        "Section 8. Generators": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#generators"
            },
            {
                "Name": "Generator functions",
                "resume": "Python generators are functions that contain at least one yield statement.\nA generator function returns a generator object.\nA generator object is an iterator. Therefore, it becomes exhausted once there’s no remaining item to return.",
                "link": "https://www.pythontutorial.net/advanced-python/python-generators/"
            },
            {
                "Name": "Generator expressions",
                "resume": "Use a Python generator expression to return a generator.",
                "link": "https://www.pythontutorial.net/advanced-python/python-generator-expressions/"
            }
        ],
        "Section 9. Context Managers": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#context-managers"
            },
            {
                "Name": "Context Managers",
                "resume": "Use Python context managers to define runtime contexts when executing in the with statement.\nimplement the __enter__() and __exit__() methods to support the context manager protocol.",
                "link": "https://www.pythontutorial.net/advanced-python/python-context-managers/"
            }
        ],
        "Section 10. Integer types": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#integer-types"
            },
            {
                "Name": "Integers",
                "resume": "Integers are whole numbers that include negative whole numbers, zero, and positive whole numbers.\nComputers use binary numbers to represent integers.\nPython uses a variable number of bits to represent integers. Therefore, the largest integer number that Python can represent depends on the available memory of the computer.\nIn Python, all integers are instances of the class int.\nUse the getsizeof() function of the sys module to get the number of bytes of an integer.\nPython integers support all standard operations including addition, subtraction, multiplication, division, and exponent.",
                "link": "https://www.pythontutorial.net/advanced-python/python-integers/"
            },
            {
                "Name": "Floor division operator (//)",
                "resume": "Python uses // as the floor division operator and % as the modulo operator.\nIf the numerator is N and the denominator D, then this equation N = D * ( N // D) + (N % D) is always satisfied.\nUse floor division operator // or the floor() function of the math module to get the floor division of two integers.",
                "link": "https://www.pythontutorial.net/advanced-python/python-floor-division/"
            },
            {
                "Name": "Modulo operator (%)",
                "resume": "Python uses the percent sign (%) as the modulo operator.\nThe modulo operator (%) always satisfies the equation N = D * ( N // D) + (N % D).",
                "link": "https://www.pythontutorial.net/advanced-python/python-modulo/"
            },
            {
                "Name": "bool",
                "resume": "Python uses the bool class to represent boolean values: True and False.\nTrue and False are instances of the bool class. In fact, they’re singleton objects of the bool class.\nEvery object has a boolean value, which can be True or False. The bool(object) returns the Boolean value of the obj.\nUnder the hood the bool() returns a Boolean value by calling the __bool__() or __len__() method of the object. If both methods don’t exist, the bool() returns True.",
                "link": "https://www.pythontutorial.net/advanced-python/python-bool/"
            },
            {
                "Name": "Theandoperator",
                "resume": "The X and Y returns True if both X and Y evaluate to True. Otherwise, it returns False.\nThe X and Y actually returns X if X is falsy. Otherwise, it evaluates Y and returns the result of the evaluation.",
                "link": "https://www.pythontutorial.net/advanced-python/python-and/"
            },
            {
                "Name": "Theoroperator",
                "resume": "",
                "link": "https://www.pythontutorial.net/advanced-python/python-or/"
            }
        ],
        "Section 11. Float": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#float"
            },
            {
                "Name": "Float",
                "resume": "Python uses float class to represent real numbers.\nPython uses a fixed number of bytes (8 bytes) to represent floats. Therefore, it can represent some numbers in binary approximately.\nUse the isclose() function from the math module to test equality for floating-point numbers.",
                "link": "https://www.pythontutorial.net/advanced-python/python-float/"
            },
            {
                "Name": "Converting float to int",
                "resume": "Convert a float to an int always results in a data loss.\nThe trunc() function returns the integer part of a number.\nThe floor() function returns the largest integer less than or equal to a number.\nThe ceil() function returns the smallest integer greater than or equal to a number.",
                "link": "https://www.pythontutorial.net/advanced-python/python-float-to-int/"
            },
            {
                "Name": "Rounding",
                "resume": "Use the round(number, ndigits) function to round a number to the ndigits precision after the decimal point.",
                "link": "https://www.pythontutorial.net/advanced-python/python-rounding/"
            }
        ],
        "Section 12. Decimal": [
            {
                "Name": "Introduction",
                "resume": "Decimal – learn about the decimal module that provides support for fast correctly-rounded decimal floating-point arithmetic.",
                "link": "https://www.pythontutorial.net/advanced-python/#decimal"
            },
            {
                "Name": "Decimal",
                "resume": "Use the Python decimal module when you want to support fast correctly-rounded decimal floating-point arithmetic.\nUse the Decimal class from the decimal module to create Decimal object from strings, integers, and tuples.\nThe Decimal numbers have a context that controls the precision and rounding mechanism.\nThe Decimal class doesn’t have all methods defined in the math module. However, you should use the Decimal’s arithmetic methods if they’re available.",
                "link": "https://www.pythontutorial.net/advanced-python/python-decimal/"
            }
        ]
    },
    "Python Regex": {
        "Section 1. Basic Regular Expressions": [
            {
                "Name": "Introduction",
                "resume": "Regex Cheat Sheet – provide you with a Python regular expression cheat sheet.",
                "link": "https://www.pythontutorial.net/python-regex/#basic-regular-expressions"
            },
            {
                "Name": "Regular expressions",
                "resume": "A regular expression is a string that contains the special characters for matching a string with a pattern.\nUse the Pattern object or functions in re module to search for a pattern in a string.\nUse raw strings to construct regular expression to avoid escaping the backslashes.",
                "link": "https://www.pythontutorial.net/python-regex/python-regular-expressions/"
            },
            {
                "Name": "Character sets",
                "resume": "Use \\d character set to match any single digit.\nUse \\w character set to match any single word character.\nUse \\s character set to match any whitespace.\nThe \\D, \\W, \\S character set are the inverse sets of \\d, \\w, and \\s character set.\nUse the dot character set (.) to match any character but a new line.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-character-set/"
            },
            {
                "Name": "Anchors",
                "resume": "Regex anchors match character positions, not the characters.\nThe caret anchor (^) matches at the beginning of a string.\nThe dollar anchor ($) matches at the end of a string.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-anchors/"
            },
            {
                "Name": "Word Boundary",
                "resume": "The \\b represents a word boundary in a string.\nUse the r'\\bword\\b' pattern to match the whole word",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-word-boundary/"
            }
        ],
        "Section 2. Quantifiers": [
            {
                "Name": "Introduction",
                "resume": "Regex Cheat Sheet – provide you with a Python regular expression cheat sheet.",
                "link": "https://www.pythontutorial.net/python-regex/#quantifiers"
            },
            {
                "Name": "Quantifiers",
                "resume": "Quantifiers match their preceding elements a number of times.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-quantifiers/"
            },
            {
                "Name": "Greedy Quantifiers",
                "resume": "By default, all quantifiers use the greedy mode.\nGreedy quantifiers will match their preceding elements as much as possible.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-greedy/"
            },
            {
                "Name": "Non-greedy (or lazy) Quantifiers",
                "resume": "Non-greedy quantifiers match their preceding elements as little as possible to return the smallest possible match.\nAdd a question mark (?) to a quantifier to turn it into a non-greedy quantifier.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-non-greedy/"
            }
        ],
        "Section 3. Sets and Ranges": [
            {
                "Name": "Introduction",
                "resume": "Regex Cheat Sheet – provide you with a Python regular expression cheat sheet.",
                "link": "https://www.pythontutorial.net/python-regex/#sets-and-ranges"
            },
            {
                "Name": "Sets & Ranges",
                "resume": "A set or a range matches any single character or character set specified in square brackets […].\nUse the caret (^) operator to negate a set or a range like [^...].",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-sets-ranges/"
            }
        ],
        "Section 4. Grouping": [
            {
                "Name": "Introduction",
                "resume": "Regex Cheat Sheet – provide you with a Python regular expression cheat sheet.",
                "link": "https://www.pythontutorial.net/python-regex/#grouping"
            },
            {
                "Name": "Capturing groups",
                "resume": "Place a rule of a pattern inside parentheses () to create a capturing group.\nUse the group() method of the Match object to get the subgroup by an index.\nUse the (?P<name>rule) to create a named capturing group for the rule in a pattern.\nUse the groupdict() method of the Match object to get the named subgroups as a dictionary.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-capturing-group/"
            },
            {
                "Name": "Backreferences",
                "resume": "Use a backreference \\N to reference the capturing group N in a regular expression.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-backreferences/"
            },
            {
                "Name": "Alternation",
                "resume": "The regex alternation X | Y matches either X or Y.\nThe regex alternation is like an OR operator in regular expressions.\nPlace the alternation part inside parentheses () to express that only that part is alternated.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-alternation/"
            },
            {
                "Name": "Non-capturing groups",
                "resume": "Use the regex non-capturing group to create a group but don’t save it in the groups of the match.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-non-capturing-group/"
            }
        ],
        "Section 5. Look Around": [
            {
                "Name": "Introduction",
                "resume": "Regex Cheat Sheet – provide you with a Python regular expression cheat sheet.",
                "link": "https://www.pythontutorial.net/python-regex/#look-around"
            },
            {
                "Name": "Lookahead",
                "resume": "Use the Python regex lookahead X(?=Y) that matches X only if it is followed by Y.\nUse the negative regex lookahead X(?!Y) that matches X only if it is not followed by Y.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-lookahead/"
            },
            {
                "Name": "Lookbehind",
                "resume": "A lookbehind (?<!Y)X matches X only if there is element Y before it.\nA negative lookbehind (?<!Y)X matches X only if there’s no element Y before it.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-lookbehind/"
            }
        ],
        "Section 6. Python regex functions": [
            {
                "Name": "Introduction",
                "resume": "Regex Cheat Sheet – provide you with a Python regular expression cheat sheet.",
                "link": "https://www.pythontutorial.net/python-regex/#python-regex-functions"
            },
            {
                "Name": "findall()",
                "resume": "Use the Python regex findall() function to get a list of matched strings.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-findall/"
            },
            {
                "Name": "fullmatch()",
                "resume": "Use the Python regex fullmatch() function to check if the whole string matches a pattern of a regular expression.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-fullmatch/"
            },
            {
                "Name": "finditer()",
                "resume": "Use the finditer() function to match a pattern in a string and return an iterator yielding the Match objects.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-finditer/"
            },
            {
                "Name": "match()",
                "resume": "Use the search() function to find zero or more characters at the beginning of a string that matches a pattern.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-match/"
            },
            {
                "Name": "search()",
                "resume": "Use the regex search() function to return the first match of a pattern in a string or None if the search was unsuccessful.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-search/"
            },
            {
                "Name": "sub()",
                "resume": "Use the Python regex sub() function to replace the occurrences of matches of a pattern with a replacement.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-sub/"
            },
            {
                "Name": "split()",
                "resume": "Use the Python regex split() function to split a string using sepators as the matches of a regular expression.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-split/"
            },
            {
                "Name": "Regex flags",
                "resume": "The Python regex flags are instances of the RegexFlag enumeration class.\nThe regex flags change the way the regex engine performs pattern matching.\nThe regex functions like match, fullmatch, findall, finditer, search, split, sub, subn accept a flags parameter that can be a flag a combination of regex flags.\nUse the | operator to combine two regex flags.",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-flags/"
            }
        ],
        "Section 7. Python Regex Cheat Sheet": [
            {
                "Name": "Introduction",
                "resume": "Regex Cheat Sheet – provide you with a Python regular expression cheat sheet.",
                "link": "https://www.pythontutorial.net/python-regex/#python-regex-cheat-sheet"
            },
            {
                "Name": "Regex Cheat Sheet",
                "resume": "",
                "link": "https://www.pythontutorial.net/python-regex/python-regex-cheat-sheet/"
            }
        ]
    },
    "Unit Testing": {
        "Section 1. Introduction to unit testing in Python": [
            {
                "Name": "Introduction",
                "resume": "Generating test coverage reports – learn about test coverage and how to generate the test coverage report using the coverage module.\nDefining parameterized tests using subTest() – show you how to define parameterized tests using the unittest’s subTest() context manager.",
                "link": "https://www.pythontutorial.net/python-unit-testing/#introduction-to-unit-testing-in-python"
            },
            {
                "Name": "What is unit testing",
                "resume": "A unit test is an automated test that verifies a small piece of code, executes fast, and executes in an isolated manner.\nUse the unittest module to perform unit testing.\nCreate a class that inherits from the unittest.TestCase class to make a test case.\nUse the assertEqual() method to test if two values are equal.\nUse the assertRaises() method in a context manager to test expected exceptions.\nUse the python -m unittest -v command to run a test.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-unittest/"
            },
            {
                "Name": "Test fixtures",
                "resume": "Fixtures are functions and methods that execute before and after test code blocks execute.\nThe setUpModule() and tearDownModule() run before and after all test methods in the module.\nThe setUpclass() and tearDownClass() run before and after all test methods in a test class.\nThe setUp() and tearDown() run before and after each test method of a test class.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-test-fixtures/"
            },
            {
                "Name": "Skipping tests",
                "resume": "Use the @unittest.skip() decorator, skipTest() method, or raise SkipTest exception to skip a test.\nUse the @unittest.skipIf() or @unittest.skipUnless() to skip a test conditionally.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-unittest-skip-test/"
            },
            {
                "Name": "Running unittest",
                "resume": "Place the development code and test code in separate directories. It’s a good practice to store the test code in the test directory.\nUse the command python -m unittest discover -v to discover and execute all the tests.\nUse the command python -m unittest test_package.test_module -v to run a single test module.\nUse the command python -m unittest test_package.test_module.TestClass -v to run a single test class.\nUse the command python -m unittest test_package.test_module.TestClass.test_method -v to run a single test method.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-run-unittest/"
            }
        ],
        "Section 2. assert methods": [
            {
                "Name": "Introduction",
                "resume": "Generating test coverage reports – learn about test coverage and how to generate the test coverage report using the coverage module.\nDefining parameterized tests using subTest() – show you how to define parameterized tests using the unittest’s subTest() context manager.",
                "link": "https://www.pythontutorial.net/python-unit-testing/#assert-methods"
            },
            {
                "Name": "assert methods",
                "resume": "",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-unittest-assert/"
            },
            {
                "Name": "assertEqual()",
                "resume": "Use the assertEqual() method to test if two values are equal.\nUse the assertNotEqual() method to test if two values are not equal.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-assertequal/"
            },
            {
                "Name": "assertAlmostEqual()",
                "resume": "Use the Python assertAlmostEqual() method to test if two values are approximately equal.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-assertalmostequal/"
            },
            {
                "Name": "assertIs()",
                "resume": "Use the assertIs() method to test if two objects are the same.\nUse the assertIsNot() method to test if two variables reference different objects.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-assertis/"
            },
            {
                "Name": "assertIsInstance()",
                "resume": "Use the assertIsInstance() method to test if an object is an instance of a class.\nUse the assertIsNotInstance() method to test if an object is not an instance of a class.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-assertisinstance/"
            },
            {
                "Name": "assertIsNone()",
                "resume": "Use the assertIsNone() method to test if a variable is None.\nuse the assertIsNotNone() method to test if a variable is not None.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-assertisnone/"
            },
            {
                "Name": "assertTrue()",
                "resume": "Use the assertTrue() method to test if an expression is True\nUse the assertFalse() method to test if an expression is False",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-asserttrue/"
            },
            {
                "Name": "assertIn()",
                "resume": "Use the assertIn() method to test if a member is in a container.\nUse the assertNotIn() method to test if a member is not in a container.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-assertin/"
            }
        ],
        "Section 3. Test doubles": [
            {
                "Name": "Introduction",
                "resume": "Generating test coverage reports – learn about test coverage and how to generate the test coverage report using the coverage module.\nDefining parameterized tests using subTest() – show you how to define parameterized tests using the unittest’s subTest() context manager.",
                "link": "https://www.pythontutorial.net/python-unit-testing/#test-doubles"
            },
            {
                "Name": "Mock",
                "resume": "Use the Mock class of the unittest.mock class to mock other objects.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-unittest-mock/"
            },
            {
                "Name": "patch()",
                "resume": "Use the patch() from unittest.mock module to temporarily replace a target with a mock object.\nUse the patch() as a decorator, a context manager, or manually call start() and stop() patching.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-patch/"
            },
            {
                "Name": "Stubs",
                "resume": "Use stubs to return hard-coded values for testing.\nUse MagicMock class of unittest.mock module to create stubs.\nUse patch() to create MagicMock more easily.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-stubs/"
            },
            {
                "Name": "Mocking requests module",
                "resume": "Use the patch() function to mock the requests module (mock_requests)\nUse the MagicMock to mock the response returned by the mock_requests.get() function.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-mock-requests/"
            }
        ],
        "Section 4. Test coverage & Parameterized tests": [
            {
                "Name": "Introduction",
                "resume": "Generating test coverage reports – learn about test coverage and how to generate the test coverage report using the coverage module.\nDefining parameterized tests using subTest() – show you how to define parameterized tests using the unittest’s subTest() context manager.",
                "link": "https://www.pythontutorial.net/python-unit-testing/#test-coverage-parameterized-tests"
            },
            {
                "Name": "Generating test coverage reports",
                "resume": "Use the python -m coverage run -m unittest command to gather coverage data and the python -m coverage report command to generate a coverage report.\nUse the python -m coverage html to generate the test coverage report in HTML format.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-unittest-coverage/"
            },
            {
                "Name": "Defining parameterized tests using subTest()",
                "resume": "Use the unittest subTest() context manager to parameterize tests.",
                "link": "https://www.pythontutorial.net/python-unit-testing/python-unittest-subtest/"
            }
        ]
    },
    "NumPy": {
        "Section 1. Getting started": [
            {
                "Name": "Introduction",
                "resume": "concatenate() – join two or more arrays along an existing axis.\nstack() – join two or more arrays along a new axis.\nvstack() – join two or more arrays vertically.\nhstack() – join two or more arrays horizontally.\nsplit() – split an array into subarrays.",
                "link": "https://www.pythontutorial.net/python-numpy/#getting-started"
            },
            {
                "Name": "What is NumPy",
                "resume": "NumPy stands for Numerical Python. It’s a Python library for numerical calculation.\nUse np as the alias for the NumPy module.",
                "link": "https://www.pythontutorial.net/python-numpy/what-is-numpy/"
            }
        ],
        "Section 2. Creating arrays": [
            {
                "Name": "Introduction",
                "resume": "concatenate() – join two or more arrays along an existing axis.\nstack() – join two or more arrays along a new axis.\nvstack() – join two or more arrays vertically.\nhstack() – join two or more arrays horizontally.\nsplit() – split an array into subarrays.",
                "link": "https://www.pythontutorial.net/python-numpy/#creating-arrays"
            },
            {
                "Name": "Creating arrays",
                "resume": "A numpy array is a grid of values with the same type and is indexed by a tuple of non-negative values.\nNumpy arrays have the type of ndarray.\nUse the array() function to create a numpy array.\nUse the dtype property to get the data type of array’s elements.\nUse the ndim property to get the number of dimensions or the number of axes.\nUse the shape property to get the number of dimensions as well as the number of elements in each dimension.",
                "link": "https://www.pythontutorial.net/python-numpy/create-numpy-array/"
            },
            {
                "Name": "zeros()",
                "resume": "Use numpy zeros() function to create an array of a given shape whose elements are filled with zeros.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-zeros/"
            },
            {
                "Name": "ones()",
                "resume": "Use numpy ones() function to create an array of a given shape whose elements are filled with ones.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-ones/"
            },
            {
                "Name": "arange()",
                "resume": "Use numpy arange() function to create a new numpy array with evenly spaced numbers between start (inclusive) and stop (exclusive) with a given interval.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-arange/"
            },
            {
                "Name": "linspace()",
                "resume": "Use the numpy linspace() function to create a numpy array with evenly spaced numbers over a given interval.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-linspace/"
            }
        ],
        "Section 3. Array indexing & slicing": [
            {
                "Name": "Introduction",
                "resume": "concatenate() – join two or more arrays along an existing axis.\nstack() – join two or more arrays along a new axis.\nvstack() – join two or more arrays vertically.\nhstack() – join two or more arrays horizontally.\nsplit() – split an array into subarrays.",
                "link": "https://www.pythontutorial.net/python-numpy/#array-indexing-slicing"
            },
            {
                "Name": "Indexing",
                "resume": "Use square bracket notation [] with an index to access elements of a numpy array.\nUse zero and positive indexes to start selecting from the beginning of the array.\nUse negative indexes to start selecting from the end of the array.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-array-indexing/"
            },
            {
                "Name": "Slicing",
                "resume": "Use slicing to extract elements from a numpy array\nUse a[m:n:p] to slice one-dimensional arrays.\nUse a[m:n:p, i:j:k, ...] to slice multidimensional arrays",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-array-slicing/"
            },
            {
                "Name": "Fancy indexing",
                "resume": "Fancy indexing allows you to index an array using another array, a list, or a sequence of integers.",
                "link": "https://www.pythontutorial.net/python-numpy/fancy-indexing/"
            },
            {
                "Name": "Boolean indexing",
                "resume": "Use boolean indexing to filter an array.",
                "link": "https://www.pythontutorial.net/python-numpy/boolean-indexing/"
            },
            {
                "Name": "View vs. copy",
                "resume": "When you slice an array, you’ll get a view of the array.\nUse the copy() method to make a copy of an array rather than a view.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-copy/"
            }
        ],
        "Section 4. Aggregate functions": [
            {
                "Name": "Introduction",
                "resume": "concatenate() – join two or more arrays along an existing axis.\nstack() – join two or more arrays along a new axis.\nvstack() – join two or more arrays vertically.\nhstack() – join two or more arrays horizontally.\nsplit() – split an array into subarrays.",
                "link": "https://www.pythontutorial.net/python-numpy/#aggregate-functions"
            },
            {
                "Name": "sum()",
                "resume": "Use the sum() function to get the sum of all elements of an array.\nUse the axis argument to specify the axis that you want to sum up.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-sum/"
            },
            {
                "Name": "mean()",
                "resume": "Use the numpy mean() function to calculate the average of elements in an array.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-mean/"
            },
            {
                "Name": "var()",
                "resume": "Use the numpy var() function to calculate the variance of elements in an array.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-var/"
            },
            {
                "Name": "std()",
                "resume": "Use the numpy std() function to calculate the standard deviation.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-std/"
            },
            {
                "Name": "prod()",
                "resume": "Use numpy prod() function to calculate the product of numbers in an array.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-prod/"
            },
            {
                "Name": "amin()",
                "resume": "Use the numpy amin() function to find the minimum element in an array or minimum element along an axis.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-amin/"
            },
            {
                "Name": "amax()",
                "resume": "Use the numpy amax() function to find the maximum element in an array or maximum element along an axis.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-amax/"
            },
            {
                "Name": "all()",
                "resume": "Use the numpy all() function to test whether all elements in an array or along an axis evaluate to True.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-all/"
            },
            {
                "Name": "any()",
                "resume": "Use the numpy any function to test whether any element in an array or along an axis evaluates to True.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-any/"
            }
        ],
        "Section 5. Array operations": [
            {
                "Name": "Introduction",
                "resume": "concatenate() – join two or more arrays along an existing axis.\nstack() – join two or more arrays along a new axis.\nvstack() – join two or more arrays vertically.\nhstack() – join two or more arrays horizontally.\nsplit() – split an array into subarrays.",
                "link": "https://www.pythontutorial.net/python-numpy/#array-operations"
            },
            {
                "Name": "reshape()",
                "resume": "Use the numpy reshape() function to change the shape of an array without changing its elements.\nYou can change the shape of an array as long as the number of elements is the same.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-reshape/"
            },
            {
                "Name": "transpose()",
                "resume": "Use the transpose() to transpose an array.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-transpose/"
            },
            {
                "Name": "sort()",
                "resume": "Use the numpy sort() function to sort elements of an array.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-sort/"
            },
            {
                "Name": "flatten()",
                "resume": "Use the numpy array flatten() method to return a copy of an array collapsed into one dimension.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-flatten/"
            },
            {
                "Name": "ravel()",
                "resume": "Use the numpy ravel() function to return a contiguous flattened array.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-ravel/"
            }
        ],
        "Section 6. Arithmetic operations": [
            {
                "Name": "Introduction",
                "resume": "concatenate() – join two or more arrays along an existing axis.\nstack() – join two or more arrays along a new axis.\nvstack() – join two or more arrays vertically.\nhstack() – join two or more arrays horizontally.\nsplit() – split an array into subarrays.",
                "link": "https://www.pythontutorial.net/python-numpy/#arithmetic-operations"
            },
            {
                "Name": "add()",
                "resume": "Use the + operator or add() function to add two equal-sized array.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-add/"
            },
            {
                "Name": "subtract()",
                "resume": "Use the subtract operator (-) or subtract() function to find the difference between two equal-sized arrays.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-subtract/"
            },
            {
                "Name": "multiply()",
                "resume": "Use the * operator or multiply() function to find the product of two equal-sized arrays.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-multiply/"
            },
            {
                "Name": "divide()",
                "resume": "Use the * operator or divide() function to find the quotient of two equal-sized arrays.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-divide/"
            },
            {
                "Name": "Broadcasting",
                "resume": "NumPy broadcasting is a set of rules for applying arithmetic operations on arrays of different shapes.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-broadcasting/"
            }
        ],
        "Section 7. Joining & splitting arrays": [
            {
                "Name": "Introduction",
                "resume": "concatenate() – join two or more arrays along an existing axis.\nstack() – join two or more arrays along a new axis.\nvstack() – join two or more arrays vertically.\nhstack() – join two or more arrays horizontally.\nsplit() – split an array into subarrays.",
                "link": "https://www.pythontutorial.net/python-numpy/#joining-splitting-arrays"
            },
            {
                "Name": "concatenate()",
                "resume": "Use the numpy concatenate() function to join elements of a sequence of arrays into a single array.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-concatenate/"
            },
            {
                "Name": "stack()",
                "resume": "Use the numpy stack() function to join two or more arrays into one.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-stack/"
            },
            {
                "Name": "vstack()",
                "resume": "Use the numpy vstack() function to join two or more arrays vertically.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-vstack/"
            },
            {
                "Name": "hstack()",
                "resume": "Use the numpy hstack() function to join two or more arrays horizontally.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-hstack/"
            },
            {
                "Name": "split()",
                "resume": "Use NumPy split() function to split an array into subarrays.",
                "link": "https://www.pythontutorial.net/python-numpy/numpy-split/"
            }
        ]
    },
    "Tkinter": {
        "Section 1. Tkinter Fundamentals": [
            {
                "Name": "Introduction",
                "resume": "Tkinter MVC – structure a Tkinter application using the MVC design pattern.\nTkinter validation – show you how to use the Tkinter validation to validate user inputs.\nTkinter & Matplotlib – show you how to display a bar chart from Matplotlib in Python.\nTkinter System Tray – learn how to develop a system tray application in Tkinter.",
                "link": "https://www.pythontutorial.net/tkinter/#tkinter-fundamentals"
            },
            {
                "Name": "Tkinter Hello, World!",
                "resume": "Import the tkinter module to create a Tkinter desktop application.\nUse Tk class to create the main window and call the mainloop() method to main the display of the main window.\nIn Tkinter, components are called widgets.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-hello-world/"
            },
            {
                "Name": "Window",
                "resume": "Use the title() method to change the title of the window.\nUse the geometry() method to change the size and location of the window.\nUse the resizable() method to specify whether a window can be resizable horizontally or vertically.\nUse the window.attributes('-alpha',0.5) to set the transparency for the window.\nUse the window.attributes('-topmost', 1) to make the window always on top.\nUse lift() and lower() methods to move the window up and down of the window stacking order.\nUse the iconbitmap() method to change the default icon of the window.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-window/"
            },
            {
                "Name": "Tk Themed Widgets",
                "resume": "Tkinter has both classic and themed widgets (ttk widget). The Tk themed widgets are also known as ttk widgets.\nThe tkinter.ttk module contains all the ttk widgets.\nDo use ttk widgets whenever they’re available.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-ttk/"
            },
            {
                "Name": "Setting options for a widget",
                "resume": "Use the widget constructor during the widget’s creation.\nSet a property value using a dictionary index after creating the widget.\nCall the config() method with keyword arguments.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-options/"
            },
            {
                "Name": "Command Binding",
                "resume": "Assigning a function name to the command option of a widget is called command binding in Tkinter. The assigned function will be invoked automatically when the corresponding event occurs on the widget.\nOnly a few widgets support the command option.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-command/"
            },
            {
                "Name": "Event Binding",
                "resume": "Use the bind() method to bind an event to a widget.\nTkinter supports both instance-level and class-level bindings.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-event-binding/"
            },
            {
                "Name": "Label",
                "resume": "Use the Tkinter Label widget to display text or images.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-label/"
            },
            {
                "Name": "Button",
                "resume": "Use the ttk.Button() class to create a button.\nAssign a lambda expression or a function to the command option to respond to the button click event.\nAssign the tk.PhotoImage() to the image property to display an image on the button.\nUse the compound option if you want to display both text and image on a button.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-button/"
            },
            {
                "Name": "Entry",
                "resume": "Use the ttk.Entry widget to create a textbox.\nUse the show option to create a password entry.\nTrack and change the current value of an Entry widget via a StringVar object.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-entry/"
            }
        ],
        "Section 2. Layout Management": [
            {
                "Name": "Introduction",
                "resume": "Tkinter MVC – structure a Tkinter application using the MVC design pattern.\nTkinter validation – show you how to use the Tkinter validation to validate user inputs.\nTkinter & Matplotlib – show you how to display a bar chart from Matplotlib in Python.\nTkinter System Tray – learn how to develop a system tray application in Tkinter.",
                "link": "https://www.pythontutorial.net/tkinter/#layout-management"
            },
            {
                "Name": "pack",
                "resume": "Use the Tkinter pack geometry manager to arrange widgets in one direction, either horizontally or vertically.\nUse the side, expand, and fill, padx, pady, ipadx, and ipady options of the pack geometry manager to control the layout of the widgets.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-pack/"
            },
            {
                "Name": "grid",
                "resume": "Use the columnconfigure() and rowconfigure() methods to specify the weight of a column and a row of a grid.\nUse grid() method to position a widget on a grid.\nUse sticky option to align the position of the widget on a cell and define how the widget will be stretched.\nUse ipadx, ipady and padx, pady to add internal and external paddings.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-grid/"
            },
            {
                "Name": "place",
                "resume": "Use the Tkinter place geometry manager to precisely position widgets within its container using the (x, y) coordinate system.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-place/"
            }
        ],
        "Section 3. Ttk & Tkinter Widgets": [
            {
                "Name": "Introduction",
                "resume": "Tkinter MVC – structure a Tkinter application using the MVC design pattern.\nTkinter validation – show you how to use the Tkinter validation to validate user inputs.\nTkinter & Matplotlib – show you how to display a bar chart from Matplotlib in Python.\nTkinter System Tray – learn how to develop a system tray application in Tkinter.",
                "link": "https://www.pythontutorial.net/tkinter/#ttk-tkinter-widgets"
            },
            {
                "Name": "Frame",
                "resume": "A ttk.Frame is a simple rectangle widget that can hold other widgets.\nTkinter frames are used to organize user interfaces visually and at the coding level.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-frame/"
            },
            {
                "Name": "Text",
                "resume": "Use Tkinter Text widget to create a multi-line text area.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-text/"
            },
            {
                "Name": "Scrollbar",
                "resume": "Add a Scrollbar widget to scrollable widgets like Text widget.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-scrollbar/"
            },
            {
                "Name": "ScrolledText",
                "resume": "Use the Tkinter ScrolledText widget to create a Text widget with an integrated vertical Scrollbar.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-scrolledtext/"
            },
            {
                "Name": "Listbox",
                "resume": "Use the tk.Listbox(container, height, listvariable) to create a Listbox widget; a listvariable should be a tk.StringVar(value=items).\nBind a callback function to the '<<ListboxSelect>>' event to execute the function when one or more list items are selected.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-listbox/"
            },
            {
                "Name": "Separator",
                "resume": "Use a separator widget to place a thin horizontal or vertical rule between two groups of widgets.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-separator/"
            },
            {
                "Name": "Checkbox",
                "resume": "Use Checkbutton() to create a checkbox.\nUse command argument to specify a function that executes when the button is checked or unchecked.\nUse the onvalue and offvalue to determine what value the variable will take.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-checkbox/"
            },
            {
                "Name": "Radio Button",
                "resume": "Use ttk.Radiobutton(text, variable) to create a radio button; the variable should be a tk.StringVar()\nA set of radio buttons share the same variable.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-radio-button/"
            },
            {
                "Name": "Combobox",
                "resume": "Use ttk.Combobox(root, textvariable) to create a combobox.\nSet the state property to readonly to prevent users from entering custom values.\nA combobox widget emits the '<<ComboboxSelected>>' event when the selected value changes.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-combobox/"
            },
            {
                "Name": "PanedWindow",
                "resume": "Use the Tkinter PanedWindow widget to divide the space of a window or a frame.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-panedwindow/"
            },
            {
                "Name": "Slider",
                "resume": "Use the ttk.Scale() to create a slider widget.\nUse the scale.get() or the variable option to get the current value of the slider.\nUse the command option to assign a function that will execute when the slider’s value changes.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-slider/"
            },
            {
                "Name": "Spinbox",
                "resume": "Use ttk.Spinbox(container, **options) to create a Spinbox.\nSet wrap=True to set the current value to the minimum value when it reaches the maximum value and vice versa.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-spinbox/"
            },
            {
                "Name": "Sizegrip",
                "resume": "Use the Tkinter Sizegrip widget to allow users to resize the entire window application.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-sizegrip/"
            },
            {
                "Name": "LabelFrame",
                "resume": "Use LabelFrame widget to group related widgets into one group.\nUse ttk.LabelFrame(container, **option) to create a LabelFrame widget.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-labelframe/"
            },
            {
                "Name": "Progressbar",
                "resume": "Use the ttk.Progressbar(container, orient, length, mode) to create a progressbar.\nUse the indeterminate mode when the program cannot accurately know the relative progress to display.\nUse the determinate mode if you know how to measure the progress accurately.\nUse the start(), step(), and stop() methods to control the current value of the progressbar.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-progressbar/"
            },
            {
                "Name": "Notebook",
                "resume": "Use the ttk.Notebook class to create a notebook widget.\nUse the add() method to add a tab to the notebook.\nUse the hide() method to temporarily remove a tab from the notebook. To remove a tab permanently, use the forget() method.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-notebook/"
            },
            {
                "Name": "Treeview",
                "resume": "Use a Tkinter Treeview widget to display both tabular and hierarchical data.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-treeview/"
            },
            {
                "Name": "Canvas",
                "resume": "A canvas is a blank area where you can draw items such as lines, rectangles, ovals, arcs, texts, and images.\nUse Canvas() to create a new canvas object.\nUse tag_bind() method to bind an event to an item on a canvas.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-canvas/"
            },
            {
                "Name": "Cursors",
                "resume": "The root window has only two cursors: normal (\"\") and busy (\"watch\").\nThe widget has many cursors with fixed names.\nUse the cursor parameter to change the cursor for the root window or a widget.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-cursors/"
            }
        ],
        "Section 4. Value Holders": [
            {
                "Name": "Introduction",
                "resume": "Tkinter MVC – structure a Tkinter application using the MVC design pattern.\nTkinter validation – show you how to use the Tkinter validation to validate user inputs.\nTkinter & Matplotlib – show you how to display a bar chart from Matplotlib in Python.\nTkinter System Tray – learn how to develop a system tray application in Tkinter.",
                "link": "https://www.pythontutorial.net/tkinter/#value-holders"
            },
            {
                "Name": "StringVar",
                "resume": "Use Tkinter StringVar object to track and change the string state of a widget.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-stringvar/"
            },
            {
                "Name": "IntVar",
                "resume": "Use the IntVar class to create integer variable objects.\nLink IntVar objects to widgets to get the integer values.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-intvar/"
            },
            {
                "Name": "DoubleVar",
                "resume": "Use the DoubleVar class to create float variable objects.\nAssociate DoubleVar objects with widgets to manage float values.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-doublevar/"
            },
            {
                "Name": "BooleanVar",
                "resume": "Use a BooleanVar object to track and control the boolean state of a widget.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-booleanvar/"
            }
        ],
        "Section 5. Tkinter Examples": [
            {
                "Name": "Introduction",
                "resume": "Tkinter MVC – structure a Tkinter application using the MVC design pattern.\nTkinter validation – show you how to use the Tkinter validation to validate user inputs.\nTkinter & Matplotlib – show you how to display a bar chart from Matplotlib in Python.\nTkinter System Tray – learn how to develop a system tray application in Tkinter.",
                "link": "https://www.pythontutorial.net/tkinter/#tkinter-examples"
            },
            {
                "Name": "Tkinter example",
                "resume": "",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-example/"
            }
        ],
        "Section 6. Object-Oriented Programming with Tkinter": [
            {
                "Name": "Introduction",
                "resume": "Tkinter MVC – structure a Tkinter application using the MVC design pattern.\nTkinter validation – show you how to use the Tkinter validation to validate user inputs.\nTkinter & Matplotlib – show you how to display a bar chart from Matplotlib in Python.\nTkinter System Tray – learn how to develop a system tray application in Tkinter.",
                "link": "https://www.pythontutorial.net/tkinter/#object-oriented-programming-with-tkinter"
            },
            {
                "Name": "Creating an object-oriented window",
                "resume": "Use an object-oriented programming approach to make the code more organized.\nDefine a class that inherits from the tk.Tk class. Always, call the super().__init__() from the parent class in the child class.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-object-oriented-window/"
            },
            {
                "Name": "Creating an object-oriented frame",
                "resume": "Subclass the ttk.Frame and initialize the widgets on the frame.\nUse the subclass of the ttk.Frame in a root window.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-object-oriented-frame/"
            },
            {
                "Name": "Developing a full Tkinter object-oriented application",
                "resume": "The ConverterFrame needs a container, therefore, its __init__() method has the container argument.\nInside the __init__() method of the ConverterCFrame class, call the __init__() method of its superclass.\nAssign the widgets to the self object so that you can reference them in other methods of the ConverterFrame class.\nAssign the command option of the convert button to the self.convert method.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-object-oriented-application/"
            },
            {
                "Name": "Switching between frames",
                "resume": "Use tkraise() method to bring a frame on top a list of frames.",
                "link": "https://www.pythontutorial.net/tkinter/tkraise/"
            }
        ],
        "Section 7. Dialogs and Menus": [
            {
                "Name": "Introduction",
                "resume": "Tkinter MVC – structure a Tkinter application using the MVC design pattern.\nTkinter validation – show you how to use the Tkinter validation to validate user inputs.\nTkinter & Matplotlib – show you how to display a bar chart from Matplotlib in Python.\nTkinter System Tray – learn how to develop a system tray application in Tkinter.",
                "link": "https://www.pythontutorial.net/tkinter/#dialogs-and-menus"
            },
            {
                "Name": "Displaying a message box",
                "resume": "Use showinfo(), showerror(), showwarrning() functions from the tkinter.messagebox module to show an information, error, and warning message.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-messagebox/"
            },
            {
                "Name": "Displaying a Yes/No Dialog",
                "resume": "Use the Tkinter askyesno() function to show a dialog that asks for user confirmation.\nThe askyesno() function returns True if you click the yes button, otherwise, it returns False.\nThe askquestion() function returns a string with a value of 'yes' or 'no' instead.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-askyesno/"
            },
            {
                "Name": "Display an OK/Cancel Dialog",
                "resume": "Use the Tkinter askokcancel() function to display a confirmation dialog with two buttons OK and Cancel.\nThe askokcancel() function returns True if you click the OK button and False if you click the Cancel button.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-askokcancel/"
            },
            {
                "Name": "Display a Retry/Cancel Dialog",
                "resume": "Use the askretrycancel() function to display a Retry/Cancel dialog to confirm users to carry an operation again.\nThe askretrycancel() function returns True if the Retry button is clicked. If the Cancel button is clicked, it returns False.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-askretrycancel/"
            },
            {
                "Name": "Show an Open File Dialog",
                "resume": "Use the askopenfilename() function to display an open file dialog that allows users to select one file.\nUse the askopenfilenames() function to display an open file dialog that allows users to select multiple files.\nUse the askopenfile() or askopenfiles() function to display an open file dialog that allows users to select one or multiple files and receive a file or multiple file objects.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-open-file-dialog/"
            },
            {
                "Name": "Displaying the Native Color Chooser",
                "resume": "Use the askcolor() function from tkinter.colorchooser module to display a color chooser dialog.\nThe askcolor() function returns a tuple of the selected color or None.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-color-chooser/"
            },
            {
                "Name": "Menu",
                "resume": "Use Menu() to create a new menu,\nUse menu.add_command() method to add a menu item to the menu.\nUse menubar.add_cascade(menu_title, menu) to add a menu to the menubar.\nUse menu.add(submenu_title, submenu) to add a submenu to the menu.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-menu/"
            },
            {
                "Name": "Menubutton",
                "resume": "Use Tkinter Menubutton widget to create a menu associated with a button.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-menubutton/"
            },
            {
                "Name": "OptionMenu",
                "resume": "Use Tkinter OptionMenu widget to provide users with a fixed set of choices in a drop-down menu.\nAlways specify the default value for the OptionMenu constructor.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-optionmenu/"
            }
        ],
        "Section 8. Tkinter Themes and Styles": [
            {
                "Name": "Introduction",
                "resume": "Tkinter MVC – structure a Tkinter application using the MVC design pattern.\nTkinter validation – show you how to use the Tkinter validation to validate user inputs.\nTkinter & Matplotlib – show you how to display a bar chart from Matplotlib in Python.\nTkinter System Tray – learn how to develop a system tray application in Tkinter.",
                "link": "https://www.pythontutorial.net/tkinter/#tkinter-themes-and-styles"
            },
            {
                "Name": "Changing the ttk theme",
                "resume": "Create an instance of the ttk.Style class to access the style database.\nUse the style.theme_names() method to get available themes from the Operating System on which the Tkinter application is running.\nUse the style.theme_use() method to change the current theme to a new one.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-theme/"
            },
            {
                "Name": "Modifying ttk style",
                "resume": "A theme of a collection of styles. A style is a description of the appearance of a widget.\nUse the widget.winfo_class() method to get the widget class of a widget. The widget class defines the default style for the widget.\nUse the style.configure() method to modify the style of the widget.\nTo customize the built-in style, you can extend it using the style name new_style.builtin_style.",
                "link": "https://www.pythontutorial.net/tkinter/ttk-style/"
            },
            {
                "Name": "Understanding ttk elements",
                "resume": "A ttk widget is made up of elements. The layout determines how elements assembled the widget.\nUse the Style.layout() method to retrieve the layout of a widget class.\nUse the Style.element_options() method to get the element options of an element.\nUse the Style.lookup() method to get the attributes of an element option.",
                "link": "https://www.pythontutorial.net/tkinter/ttk-elements/"
            },
            {
                "Name": "Modifying the appearance of a widget based on its states",
                "resume": "Use the style.map() method to dynamically change the appearance of a widget based on its specific state.",
                "link": "https://www.pythontutorial.net/tkinter/ttk-style-map/"
            }
        ],
        "Section 9. Tkinter Asynchronous Programming": [
            {
                "Name": "Introduction",
                "resume": "Tkinter MVC – structure a Tkinter application using the MVC design pattern.\nTkinter validation – show you how to use the Tkinter validation to validate user inputs.\nTkinter & Matplotlib – show you how to display a bar chart from Matplotlib in Python.\nTkinter System Tray – learn how to develop a system tray application in Tkinter.",
                "link": "https://www.pythontutorial.net/tkinter/#tkinter-asynchronous-programming"
            },
            {
                "Name": "Scheduling a task with the after() method",
                "resume": "Use the Tkinter after() method to schedule an action that will run after a timeout has elapsed\nThe callback passed into the after() method still runs in the main thread. Therefore, you should avoid performing the long-running task using the after() method.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-after/"
            },
            {
                "Name": "Developing multithreading Tkinter Applications",
                "resume": "Execute long-running tasks in separate threads to make Tkinter programs responsive.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-thread/"
            },
            {
                "Name": "Displaying a progressbar while a thread is running",
                "resume": "",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-thread-progressbar/"
            }
        ],
        "Section 10. Advanced Tkinter Programming": [
            {
                "Name": "Introduction",
                "resume": "Tkinter MVC – structure a Tkinter application using the MVC design pattern.\nTkinter validation – show you how to use the Tkinter validation to validate user inputs.\nTkinter & Matplotlib – show you how to display a bar chart from Matplotlib in Python.\nTkinter System Tray – learn how to develop a system tray application in Tkinter.",
                "link": "https://www.pythontutorial.net/tkinter/#advanced-tkinter-programming"
            },
            {
                "Name": "Tkinter MVC",
                "resume": "Use MVC to structure the Tkinter applications to make them more organized.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-mvc/"
            },
            {
                "Name": "Tkinter validation",
                "resume": "Tkinter uses the validate, validatecommand, and invalidcommand options on any input widget to validate data.\nPass a callable to the widget.register() method to create a command for the validatecommand and invalidcommand options.\nvalidationcommand returns True if the data is valid or False otherwise.\ninvalidcommand will execute if the data is not valid, or when the validatecommand return False.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-validation/"
            },
            {
                "Name": "Tkinter & Matplotlib",
                "resume": "Use matplotlib library to create professional-quality visualization in the Tkinter application.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-matplotlib/"
            },
            {
                "Name": "Tkinter System Tray",
                "resume": "Use the PyStray library to create a Tkinter system tray application.",
                "link": "https://www.pythontutorial.net/tkinter/tkinter-system-tray/"
            }
        ]
    },
    "PyQt": {
        "Section 1. Getting Started": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#getting-started"
            },
            {
                "Name": "PyQt Hello World",
                "resume": "Each PyQt application has one and only one QApplication object. The QApplication object holds an event loop.\nAn event loop manages all events of the PyQt application. It checks the event queue continuously and forwards the events to their handlers.\nCall the app.exec() to start the event loop.\nUse QMainWindow to create the main window for the PyQt application and call the show() method to display the window on the screen.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-hello-world/"
            },
            {
                "Name": "Signals & Slots",
                "resume": "A signal is a special property of an object that is emitted when an event occurs.\nA slot is a callable that can receive a signal and respond to it accordingly.\nPyQt uses signals and slots to wire up events with callables.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-signals-slots/"
            }
        ],
        "Section 2. Basic Widgets": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#basic-widgets"
            },
            {
                "Name": "QLabel",
                "resume": "Use a PyQt QLabel widget to display a text or an image including an animated image.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qlabel/"
            },
            {
                "Name": "QPushButton",
                "resume": "Use the PyQt QPushButton widget to create a push button or a toggle button.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qpushbutton/"
            },
            {
                "Name": "QLineEdit",
                "resume": "Use the QLineEdit to create a single-line entry widget.\nUse the echoMode property to change the way the text is displayed.\nUse the QLineEdit widget with a QCompleter widget to support the auto-complete feature.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qlineedit/"
            }
        ],
        "Section 3. Layout Management": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#layout-management"
            },
            {
                "Name": "QHBoxLayout",
                "resume": "Use QHBoxLayout to divide the parent widget into horizontal boxes and place them sequentially from left to right.\nUse the addStretch() method of the QHBoxLayout object to add a horizontal spacer to the layout to align the child widgets left, right, or center.\nUse the setStretchFactor() method of the QHBoxLayout object to set the stretch factor for a child widget.\nUse the setSpacing() method of the QHBoxLayout object to set the spaces between child widgets.\nUse the setContentsMargins() method of the QHBoxLayout object to set the left, top, right, and bottom margins.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qhboxlayout/"
            },
            {
                "Name": "QVBoxLayout",
                "resume": "Use PyQt QVBoxLayout to divide the parent widget into vertical boxes and place the child widgets sequentially from top to bottom.\nUse the addStretch() method of the QVBoxLayout object to add a vertical spacer to the layout to align widgets at the top, bottom, or center.\nUse the setStretchFactor() method of the QVBoxLayout object to set a stretch factor for a widget in the layout.\nUse the setSpacing() method of the QVBoxLayout object to set the spaces between child widgets.\nUse the setContentsMargins() method of the QVBoxLayout object to set the left, top, right, and bottom margins of the contents.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qvboxlayout/"
            },
            {
                "Name": "QGridLayout",
                "resume": "Use PyQt QGridLayout to arrange widgets in rows and columns.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qgridlayout/"
            },
            {
                "Name": "QFormLayout",
                "resume": "Use PyQt QFormLayout to create data-entry forms.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qformlayout/"
            }
        ],
        "Section 4. More PyQt Widgets": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#more-pyqt-widgets"
            },
            {
                "Name": "QCheckbox",
                "resume": "Use the QCheckbox class to create a checkbox widget.\nThe stateChanged signal is emitted when the checkbox is checked or unchecked.\nUse the setChecked() or setState() method to check or uncheck a checkbox programmatically.\nUse setTristate() method to create a tristate checkbox.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qcheckbox/"
            },
            {
                "Name": "QRadioButton",
                "resume": "Use the PyQt QRadioButton class to create a radio button.\nRadio buttons that belong to the same parent belong to an auto-exclusive group.\nConnect to the toggled() signal to trigger an action when the radio button is switched on or off.\nUse the isChecked() method to see if the radio button is switched on.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qradiobutton/"
            },
            {
                "Name": "QCombobox",
                "resume": "Use PyQt QComboBox to create a combobox.\nUse addItem() or insertItem() to add an item to the list of the combobox.\nConnect to the activated signal to trigger an action when the selected item of a combobox changes.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qcombobox/"
            },
            {
                "Name": "QSpinBox",
                "resume": "Use QSpinBox class to create a spin box.\nConnect to the valueChanged signal to trigger an action when the current value of a spin box changes",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qspinbox/"
            },
            {
                "Name": "QDateEdit",
                "resume": "Use the QDateEdit class to create a date entry widget.\nUse the date() method to get the current value of the QDateEdit widget\nConnect to the editingFinished signal to trigger an action when editing is finished.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qdateedit/"
            },
            {
                "Name": "QTimeEdit",
                "resume": "Use the QTimeEdit class to create a date entry widget.\nUse the date() method to get the current value of the QTimeEdit widget.\nConnect to the editingFinished signal to trigger an action when editing is finished.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qtimeedit/"
            },
            {
                "Name": "QDateTimeEdit",
                "resume": "Use the QDateTimeEdit to create a date and time entry widget.\nUse the dateTime() method to get the current value of the QDateTimeEdit widget",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qdatetimeedit/"
            },
            {
                "Name": "QSlider",
                "resume": "Use the PyQt QSlider widget to create a slider.\nConnect to the valueChanged signal to update the slider’s value.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qslider/"
            },
            {
                "Name": "QWidget",
                "resume": "Use PyQt QWidget as the container of other widgets.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qwidget/"
            },
            {
                "Name": "QTabWidget",
                "resume": "Use the QTabWidget to create a tab widget.\nTabs can be movable, closable, and have different positions.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qtabwidget/"
            },
            {
                "Name": "QGroupBox",
                "resume": "Use PyQt QGroupBox class to create a group box widget.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qgroupbox/"
            },
            {
                "Name": "QTextEdit",
                "resume": "Use QTextEdit to create a widget that supports multiline text editing and viewing.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qtextedit/"
            },
            {
                "Name": "QProgressBar",
                "resume": "Use the QProgressBar class to create progress bar widgets.\nUse the setValue() to set the current value that reflects the percentage of the current progress.\nUse the reset() method to reset the progress bar so that it shows no progress.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qprogressbar/"
            }
        ],
        "Section 5. Message Boxes & Dialogs": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#message-boxes-dialogs"
            },
            {
                "Name": "QMessageBox",
                "resume": "Use QMessageBox class to create a modal dialog that displays a message box or asks the user a question and receives an answer.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qmessagebox/"
            },
            {
                "Name": "QInputDialog",
                "resume": "Use QInputDialog to create an input dialog that receives input from the user.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qinputdialog/"
            },
            {
                "Name": "QFileDialog",
                "resume": "A file dialog allows you to select one or more files or a directory.\nUse the QFileDialog class to create a file dialog widget.\nUse the getOpenFileName() static method of the QFileDialog to create a file dialog that allows users to select a single file.\nUse the getOpenFileNames() static method of the QFileDialog class to create a file dialog that allows users to select multiple files.\nUse the getExistingDirectory() static method of the QFileDialog class to create a file dialog that allows users to select a directory.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qfiledialog/"
            }
        ],
        "Section 6. Main Window, Menus, Toolbars, and Status Bars": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#main-window-menus-toolbars-and-status-bars"
            },
            {
                "Name": "QMainWindow",
                "resume": "Use the QMainWindow class to create the main window for the application.\nUse the setWindowTitle() method to set the title.\nuse the setWindowIcon() method to set the window’s icon.\nUse the setGeometry() method to set the window’s geometry including the (top, left) coordinates, width, and height.\nUse the menuBar() method to add a menu bar to the main window.\nuse the setToolBar() method to set a toolbar for the main window.\nUse the statusBar() method to add a status bar to the main window.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qmainwindow/"
            },
            {
                "Name": "QMenu",
                "resume": "Qt uses the QMenu class to represent a menu widget.\nUse the menuBar() method of the QMainWindow to create a menu bar and addMenu() method to add a new menu bar.\nUse the addAction() method of the QMenu object to add an item to a menu.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qmenu/"
            },
            {
                "Name": "QToolBar",
                "resume": "Use the QToolBar class to create a new toolbar.\nUse the addToolBar() method to add a toolbar to the main window.\nUse the addAction() method to add an item to the toolbar.\nUse the addSeparator() method to add a separator to the buttons.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qtoolbar/"
            },
            {
                "Name": "QStatusBar",
                "resume": "Qt uses QStatusBar class to create a status bar widget.\nUse the statusBar() method to get a status bar of the main window.\nUse the showMessage() to display a message on the status bar.\nUse the addWidget() or addPermanentWidget() method to add a widget to the status bar.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qstatusbar/"
            },
            {
                "Name": "QDockWidget",
                "resume": "Use the QDockWidget class to create a dock widget.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qdockwidget/"
            }
        ],
        "Section 7. List, Table, and Tree Widgets": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#list-table-and-tree-widgets"
            },
            {
                "Name": "QListWidget",
                "resume": "Use the QListWidget class allows you to create a list view widget.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qlistwidget/"
            },
            {
                "Name": "QTableWidget",
                "resume": "Use the QTableWidget class to create a table widget.\nUse the setColumnCount() and setRowCount() methods to set the columns and rows for the table.\nUse the setHorizontalHeaderLabels() method to set the horizontal headers for the table.\nUse the QTableWidgetItem class to create a table item.\nUse the setItem() method to set an item for the table.\nUse the currentRow() method to get the currently selected row.\nUse the insertRow() method to insert a new row into the table.\nUse the deleteRow() method to delete a row from the table.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qtablewidget/"
            },
            {
                "Name": "QTreeWidget",
                "resume": "Use the QTreeWidget class to create a tree widget.\nUse the setColumnCount() method of the QTreeWidget class to set the columns for the tree.\nUse the setHeaderLabels() method of the QTreeWidget class to set the column headers of the tree.\nUse the QTreeWidgetItem class to create a tree widget item.\nUse the addChild() method of the QTreeWidgetItem to establish the parent/child relationship between items.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qtreewidget/"
            }
        ],
        "Section 8. Qt Designer": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#qt-designer"
            },
            {
                "Name": "Qt Designer",
                "resume": "Use Qt Designer to design user interfaces for large applications.\nUse the pyuic6 tool to convert a .ui file into a Python source code file.\nUse loadUi() function of the uic module to load the .ui file directly.",
                "link": "https://www.pythontutorial.net/pyqt/qt-designer/"
            }
        ],
        "Section 9. PyQt & Concurrency": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#pyqt-concurrency"
            },
            {
                "Name": "QThread",
                "resume": "Use QThread class to create a worker thread to offload a long operation from the main thread.\nUse signals and slots to communicate between the main thread and the worker thread.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-qthread/"
            },
            {
                "Name": "QThreadPool",
                "resume": "Use the QRunnable class to represent a long-running task that will be offloaded to a worker thread.\nUse the QThreadPool class to manage worker threads automatically.\nEach PyQt application has one QThreadPool object. Use the globalInstance() method to get the global QThreadPool object.\nUse the start() method of the QThreadPool object to start a worker thread.",
                "link": "https://www.pythontutorial.net/pyqt/qthreadpool/"
            }
        ],
        "Section 10. Theming": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#theming"
            },
            {
                "Name": "Qt Style Sheets",
                "resume": "Use Qt Style Sheets (QSS) to customize the widgets.\nUse the setStyleSheet() method of the widgets to set style sheets for a widget.",
                "link": "https://www.pythontutorial.net/pyqt/qt-style-sheets/"
            }
        ],
        "Section 11. PyQt Model/View Pattern": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#pyqt-modelview-pattern"
            },
            {
                "Name": "Model/view pattern",
                "resume": "PyQt uses the model/view pattern to achieve the separation of concerns.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-model-view/"
            }
        ],
        "Section 12. Package & distribute PyQt apps": [
            {
                "Name": "Introduction",
                "resume": "PyQt to EXE – show you how to convert a PyQt program to an executable file using PyInstaller.",
                "link": "https://www.pythontutorial.net/pyqt/#package-distribute-pyqt-apps"
            },
            {
                "Name": "PyQt to EXE",
                "resume": "Use Pyinstaller to convert a PyQt program to an executable file.",
                "link": "https://www.pythontutorial.net/pyqt/pyqt-to-exe/"
            }
        ]
    },
    "Django": {
        "Section 1. Django Basics": [
            {
                "Name": "Introduction",
                "resume": "Cookies  – learn about cookies and how to manage them in Django.\nSessions – explain how the Django sessions work and how to use them to persist data across requests.",
                "link": "https://www.pythontutorial.net/django-tutorial/#django-basics"
            },
            {
                "Name": "Getting Started with Django",
                "resume": "Django is a Python web framework that allows you to rapidly develop web applications.\nDjango uses the MVT (Model-View-Template) pattern, which is similar to the MVC (Model-View-Controller) pattern.\nUse the django-admin startproject new_project command to create a new project.\nUse the python manage.py runserver command to run the project using the Django development web server.\nPress Ctrl-C (or Cmd-C) to stop the Django development web server.",
                "link": "https://www.pythontutorial.net/django-tutorial/getting-started-with-django/"
            },
            {
                "Name": "Creating an application",
                "resume": "A Django project contains one or more applications.\nA Django application is a group of models, views, templates, and URLs.\nUse python manage.py startapp app_name command to create a new Django application.\nDefine a function in the views.py file to create a function-based view.\nDefine a route in the urls.py file of the application to map a URL pattern with a view function.\nUse the include() function to include the urls.py of app in the urls.py of the project.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-create-app/"
            },
            {
                "Name": "Building Django Templates",
                "resume": "A Django template contains both static and dynamic parts of a web page.\nDjango uses Django Template Language (DTL) by default to create templates.\nUse {{ variable_name }} to display the value of the variable_name in a template.\nUse {% control_tag %} to include a control tag in a template.\nUse the static tag to load the static files including CSS, JavaScript, and images.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-templates/"
            },
            {
                "Name": "Defining Django models",
                "resume": "Define all models in the models.py file of the Django application.\nDefine a class that inherits from the django.db.models.Model to create a model.\nA model maps to a table in the database, in which each field maps to a column in the database table.\nOverride __str__() method to return a string representation of a model.\nUse the Meta class to configure the model.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-models/"
            },
            {
                "Name": "Making & Applying Migrations",
                "resume": "Use the makemigrations command to make migrations based on the changes that you made to the models.\nUse the migrate command to apply changes from models to the database.\nUse the sqlmigrate command to view the generated SQL based on the model.\nUse the showmigrations command to list all migrations and their status in the project.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-migrations/"
            },
            {
                "Name": "Django Admin page",
                "resume": "Django comes with a default admin panel that allows you to manage users, groups, and models.\nUse the createsuperuser to create a superuser for logging in to the Django admin site.\nUse the admin.site.register method to register a model to the admin panel.\nUse the all() method of the Model.objects to get all models as a QuerySet from the database.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-admin-page/"
            },
            {
                "Name": "Defining Django form",
                "resume": "Create a model form by subclassing the ModelForm.\nAdd the novalidate property to the form to disable HTML5 validation temporarily for testing server validation.\nUse form.is_valid() to check if the form is valid.\nUse form.save() to save form values into the database.\nUse redirect() to redirect to a path.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-form/"
            },
            {
                "Name": "Using Flash messages",
                "resume": "Use the messages from django.contrib to create and display messages.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-flash-messages/"
            },
            {
                "Name": "Creating an Edit Form",
                "resume": "Include <int:id> pattern in a URL to create an editing URL that accepts a model id as an integer.\nUse the get_object_or_404() function to get an object by id or redirect to the 404 page if the object doesn’t exist.\nPass a model instance to a model form to render the model fields.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-edit-form/"
            },
            {
                "Name": "Creating a Delete Form",
                "resume": "Use the delete() method to delete a model from the database.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-delete-form/"
            },
            {
                "Name": "Login/Logout",
                "resume": "Use authenticate() function to verify a user by username and password.\nUse login() function to log a user in.\nUse logout() function to log a user out.\nUse request.user.is_authenticated to check if the current user is authenticated.\nUser @login_required decorator to protect pages from unauthenticated users.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-login/"
            },
            {
                "Name": "Creating Registration Form",
                "resume": "Subclass the UserCreationForm to create a custom Django registration form.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-registration/"
            }
        ],
        "Section 2. Django Class-based Views": [
            {
                "Name": "Introduction",
                "resume": "Cookies  – learn about cookies and how to manage them in Django.\nSessions – explain how the Django sessions work and how to use them to persist data across requests.",
                "link": "https://www.pythontutorial.net/django-tutorial/#django-class-based-views"
            },
            {
                "Name": "Django Todo App",
                "resume": "Create a virtual environment\nInstall the Django package\nCreate a new project\nAdding static files\nSetting up templates\nCreate the todo app\nCreate the Task model and apply migrations",
                "link": "https://www.pythontutorial.net/django-tutorial/django-todo-app/"
            },
            {
                "Name": "ListView",
                "resume": "Create a class-based view that displays a list of objects by inheriting from the ListView class.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-listview/"
            },
            {
                "Name": "DetailView",
                "resume": "Use Django DetailView to display the detail of an object.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-detailview/"
            },
            {
                "Name": "CreateView",
                "resume": "Use the Django CreateView class to define a class-based view that creates an object.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-createview/"
            },
            {
                "Name": "UpdateView",
                "resume": "Define a new class that inherits from the UpdateView class to create a class-based view that edits an existing object.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-updateview/"
            },
            {
                "Name": "DeleteView",
                "resume": "Use Django DeleteView class to define a class-based view that deletes an existing object.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-deleteview/"
            },
            {
                "Name": "LoginView",
                "resume": "Use the LoginView class to create a login page.\nUse the LogoutView class to log a user out.\nUse the LoginRequiredMixin class to protect a page.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-loginview/"
            },
            {
                "Name": "FormView",
                "resume": "Use Django FormView to create a view that displays a form.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-formview/"
            },
            {
                "Name": "Password Reset",
                "resume": "Use PasswordResetView, PasswordResetDoneView, PasswordResetConfirmView, and PasswordResetCompleteView classes to implement the password reset function for the Django application.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-password-reset/"
            },
            {
                "Name": "User Profile",
                "resume": "Use the Django signal to create a profile for a user automatically.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-user-profile/"
            }
        ],
        "Section 3. Django ORM": [
            {
                "Name": "Introduction",
                "resume": "Cookies  – learn about cookies and how to manage them in Django.\nSessions – explain how the Django sessions work and how to use them to persist data across requests.",
                "link": "https://www.pythontutorial.net/django-tutorial/#django-orm"
            },
            {
                "Name": "Django ORM",
                "resume": "Django ORM allows you to interact with relational databases using Python API.\nDjango ORM uses the active record pattern, in which a class maps to a table and an object maps to a row.\nUse all() method to get all rows from a table.\nUse get() method to select a row by id.\nUse filter() method to filter rows by one or more fields.\nUse save() method to create a new row or update an existing row.\nUse delete() method to delete one or more rows from a table.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-orm/"
            },
            {
                "Name": "One-to-One relationship",
                "resume": "Use OneToOneField class to establish a one-to-one relationship.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-one-to-one/"
            },
            {
                "Name": "One-to-Many relationship",
                "resume": "In a one-to-many relationship, a row in a table is associated with one or more rows in another table.\nUse ForeignKey to establish a one-to-many relationship between models in Django.\nDefine the ForeignKey in the model of the “many” side of the relationship.\nUse the select_related() method to join two or more tables in the one-to-many relationships.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-one-to-many/"
            },
            {
                "Name": "Many-to-Many relationship",
                "resume": "In a many-to-many relationship, multiple rows in a table are associated with multiple rows in another table.\nRelation databases use a join table to establish a many-to-many relationship between two tables.\nUse ManyToManyField to model a many-to-many relationship between models in Django.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-many-to-many/"
            },
            {
                "Name": "Adding extra fields to a many-to-many relationship",
                "resume": "Use the through argument in the ManyToManyField to add extra fields to the many-to-many relationship.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-manytomanyfield-through/"
            },
            {
                "Name": "Limit/Offset",
                "resume": "Django uses array-slicing syntax to limit the number of objects returned by a QuerySet.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-limit-offset/"
            },
            {
                "Name": "Order_by",
                "resume": "Use Django order_by() to sort data by one or more fields in ascending or descending order.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-order_by/"
            },
            {
                "Name": "Startswith, endswith, and contains",
                "resume": "",
                "link": "https://www.pythontutorial.net/django-tutorial/django-orm-like/"
            },
            {
                "Name": "In",
                "resume": "Use the Django in to check if a value is in a list of values.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-orm-in/"
            },
            {
                "Name": "Range",
                "resume": "Use the Django range to check if a value is in a range of values.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-range/"
            },
            {
                "Name": "Isnull",
                "resume": "Use Django isnull to check if a value is NULL or not.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-isnull/"
            },
            {
                "Name": "Exists",
                "resume": "Use the Django exists() method to check if a QuerySet contains any rows.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-exists/"
            },
            {
                "Name": "Aggregate",
                "resume": "Use the count() method to get the number of objects of a QuerySet.\nUse the Max() to get the maximum value in a set of values.\nUse the Min() to get the minimum value in a set of values.\nUse the Avg() to get the average value in a set of values.\nUse the Sum() to get the total value of a set.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-aggregate/"
            },
            {
                "Name": "Group By",
                "resume": "Use values() and annotate() method to group rows into groups.\nUse filter() to add conditions to filter groups.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-group-by/"
            }
        ],
        "Section 4. Building API using Django REST Framework": [
            {
                "Name": "Introduction",
                "resume": "Cookies  – learn about cookies and how to manage them in Django.\nSessions – explain how the Django sessions work and how to use them to persist data across requests.",
                "link": "https://www.pythontutorial.net/django-tutorial/#building-api-using-django-rest-framework"
            },
            {
                "Name": "Building an API using Django",
                "resume": "Django is capable of building APIs but requires a lot of effort since it doesn’t provide API features out of the box.\nUse a third-party package like Django Rest Framework to build APIs efficiently.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-rest-api/"
            },
            {
                "Name": "Introduction to the Django REST Framework (DRF)",
                "resume": "Use Django REST Framework to build RESTful API quickly.\nThe steps for defining API are creating a serializer class (serializers.py), defining views (views.py), and wiring up the views with URLs (urls.py).\nUse the browsable API interface to interact with APIs.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-rest-framework/"
            },
            {
                "Name": "Permissions",
                "resume": "Django REST Framework provides three permission levels including project level, view level, and model level.\nExtend the BasePermisssion class to define custom permission to suit your requirements.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-rest-framework-permissions/"
            },
            {
                "Name": "JWT Authentication",
                "resume": "JWT stands for JSON web token.\nJWT provides a secure way that allows server and client securely exchange information.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-rest-framework-jwt/"
            },
            {
                "Name": "Paginations",
                "resume": "Django REST Framework allows you to set the pagination style at the global and view levels.\nDjango REST Framework offers three pagination styles including page number pagination, limit offset pagination, and cursor pagination.\nThe CursorPagination works very efficiently with extremely large datasets.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-rest-framework-pagination/"
            }
        ],
        "Section 5. Django Cookies and Sessions": [
            {
                "Name": "Introduction",
                "resume": "Cookies  – learn about cookies and how to manage them in Django.\nSessions – explain how the Django sessions work and how to use them to persist data across requests.",
                "link": "https://www.pythontutorial.net/django-tutorial/#django-cookies-and-sessions"
            },
            {
                "Name": "Cookies",
                "resume": "A cookie is a piece of data that the web server sends to the web browser and the web browser may store it or not.\nThe web browser sends the cookie back to the web server in the subsequent requests in the header of the HTTP request.\nUse the set_cookie() function of the HttpResponse object to set a cookie in Django.\nUse the delete_cookie() method of the HttpResponse object to delete a cookie.\nUse the request.COOKIES dictionary to read all cookies sent by the web browser.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-cookies/"
            },
            {
                "Name": "Sessions",
                "resume": "A session is a variable that lives across requests.\nDjango uses session middleware to manage sessions.\nUse request.session to manage session data.",
                "link": "https://www.pythontutorial.net/django-tutorial/django-sessions/"
            }
        ]
    }
}